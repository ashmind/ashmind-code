<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Caliburn</name>
    </assembly>
    <members>
        <member name="T:Caliburn.Testability.StubCompositeManager">
            <summary>
            A stub version of <see cref="T:Caliburn.Services.ICompositionManager"/>.
            </summary>
        </member>
        <member name="T:Caliburn.Services.ICompositionManager">
            <summary>
            A service that manages various aspects of UI composition.
            </summary>
        </member>
        <member name="T:Caliburn.Services.IScope">
            <summary>
            A storage and composition scope.
            </summary>
        </member>
        <member name="M:Caliburn.Services.IScope.SetValue(System.Object,System.Object)">
            <summary>
            Sets the value.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Caliburn.Services.IScope.GetValue``1(System.Object)">
            <summary>
            Gets the value.
            </summary>
            <typeparam name="T">The type of the value.</typeparam>
            <param name="key">The key.</param>
            <returns>The value.</returns>
        </member>
        <member name="M:Caliburn.Services.IScope.RegisterComposite(System.String,System.Object)">
            <summary>
            Registers the composite.
            </summary>
            <param name="compositeKey">The name.</param>
            <param name="composite">The composite.</param>
        </member>
        <member name="M:Caliburn.Services.IScope.GetComposite(System.String)">
            <summary>
            Gets the composite.
            </summary>
            <param name="path">The path to the composite.</param>
            <returns>The composite.</returns>
        </member>
        <member name="M:Caliburn.Services.IScope.RegisterTransformer(System.String,Caliburn.Composition.ITransformer)">
            <summary>
            Registers the transformer for the names composite.
            </summary>
            <param name="compositeKey">The key.</param>
            <param name="transformer">The transformer.</param>
        </member>
        <member name="M:Caliburn.Services.IScope.GetTransformer(System.String)">
            <summary>
            Gets the transformer.
            </summary>
            <param name="compositeKey">The composite key for which the <see cref="T:Caliburn.Composition.ITransformer"/> is registered.</param>
            <returns>The registered transformer or default.</returns>
        </member>
        <member name="M:Caliburn.Services.ICompositionManager.CreateScope(System.Object)">
            <summary>
            Creates an <see cref="T:Caliburn.Services.IScope"/> for the object.
            </summary>
            <param name="scope">The object that defines the scope.</param>
            <returns>The created <see cref="T:Caliburn.Services.IScope"/>.</returns>
        </member>
        <member name="M:Caliburn.Services.ICompositionManager.GetScopeForView(System.Windows.DependencyObject)">
            <summary>
            Gets the <see cref="T:Caliburn.Services.IScope"/> for the view.
            </summary>
            <param name="targetView">The target view.</param>
            <returns>An <see cref="T:Caliburn.Services.IScope"/>.</returns>
        </member>
        <member name="M:Caliburn.Services.ICompositionManager.GetScopeForPresenter(System.Object)">
            <summary>
            Gets the <see cref="T:Caliburn.Services.IScope"/> for the presenter.
            </summary>
            <param name="targetPresenter">The target presenter.</param>
            <returns>An <see cref="T:Caliburn.Services.IScope"/>.</returns>
        </member>
        <member name="M:Caliburn.Testability.StubCompositeManager.SetValue(System.Object,System.Object)">
            <summary>
            Sets the value.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Caliburn.Testability.StubCompositeManager.GetValue``1(System.Object)">
            <summary>
            Gets the value.
            </summary>
            <typeparam name="T">The type of the value.</typeparam>
            <param name="key">The key.</param>
            <returns>The value.</returns>
        </member>
        <member name="M:Caliburn.Testability.StubCompositeManager.RegisterComposite(System.String,System.Object)">
            <summary>
            Registers the composite.
            </summary>
            <param name="compositeKey">The name.</param>
            <param name="composite">The composite.</param>
        </member>
        <member name="M:Caliburn.Testability.StubCompositeManager.GetComposite(System.String)">
            <summary>
            Gets the composite.
            </summary>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="M:Caliburn.Testability.StubCompositeManager.GetComposite(System.Windows.DependencyObject,System.String)">
            <summary>
            Gets the composite.
            </summary>
            <param name="scope">The scope.</param>
            <param name="path">The path.</param>
            <returns>The composite.</returns>
        </member>
        <member name="M:Caliburn.Testability.StubCompositeManager.RegisterTransformer(System.String,Caliburn.Composition.ITransformer)">
            <summary>
            Registers the transformer for the names composite.
            </summary>
            <param name="compositeKey">The key.</param>
            <param name="transformer">The transformer.</param>
        </member>
        <member name="M:Caliburn.Testability.StubCompositeManager.GetTransformer(System.String)">
            <summary>
            Gets the transformer.
            </summary>
            <param name="compositeKey">The composite key for which the <see cref="T:Caliburn.Composition.ITransformer"/> is registered.</param>
            <returns>The registered transformer or default.</returns>
        </member>
        <member name="M:Caliburn.Testability.StubCompositeManager.CreateScope(System.Object)">
            <summary>
            Creates an <see cref="T:Caliburn.Services.IScope"/> for the object.
            </summary>
            <param name="scope">The object that defines the scope.</param>
            <returns>The created <see cref="T:Caliburn.Services.IScope"/>.</returns>
        </member>
        <member name="M:Caliburn.Testability.StubCompositeManager.GetScopeForView(System.Windows.DependencyObject)">
            <summary>
            Gets the scope for view.
            </summary>
            <param name="target">The target.</param>
            <returns></returns>
        </member>
        <member name="M:Caliburn.Testability.StubCompositeManager.GetScopeForPresenter(System.Object)">
            <summary>
            Gets the scope for presenter.
            </summary>
            <param name="target">The target.</param>
            <returns></returns>
        </member>
        <member name="T:Caliburn.Composition.Composite">
            <summary>
            Attached properties related to composites.
            </summary>
        </member>
        <member name="F:Caliburn.Composition.Composite.KeyProperty">
            <summary>
            An attached property representing a compostite's lookup key.
            </summary>
        </member>
        <member name="F:Caliburn.Composition.Composite.TransformerProperty">
            <summary>
            An attached property representing a class capable of transforming data into a component.
            </summary>
        </member>
        <member name="F:Caliburn.Composition.Composite.ScopeWithProperty">
            <summary>
            An attached property defining the creation of a new composition scope.
            </summary>
        </member>
        <member name="M:Caliburn.Composition.Composite.SetKey(System.Windows.DependencyObject,System.Object)">
            <summary>
            Sets the key.
            </summary>
            <param name="dependencyObject">The dependency object.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Caliburn.Composition.Composite.SetTransformer(System.Windows.DependencyObject,System.Object)">
            <summary>
            Sets the transformer.
            </summary>
            <param name="dependencyObject">The dependency object.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Caliburn.Composition.Composite.SetScopeWith(System.Windows.DependencyObject,System.Object)">
            <summary>
            Sets the new scope.
            </summary>
            <param name="dependencyObject">The dependency object.</param>
            <param name="value">The value.</param>
        </member>
        <member name="T:Caliburn.Metadata.AsyncActionAttribute">
            <summary>
            Provides metadata for actions which should be executed asynchronously.
            </summary>
        </member>
        <member name="T:Caliburn.Metadata.ActionAttribute">
            <summary>
            Provides action-centric metadata.
            </summary>
        </member>
        <member name="P:Caliburn.Metadata.ActionAttribute.Rescue">
            <summary>
            Gets or sets the name of the rescue for the attributed action.
            </summary>
            <value>The rescue.</value>
        </member>
        <member name="P:Caliburn.Metadata.AsyncActionAttribute.Callback">
            <summary>
            Gets or sets the name of the callback used when executing the attributed action asynchronously.
            </summary>
            <value>The callback.</value>
        </member>
        <member name="P:Caliburn.Metadata.AsyncActionAttribute.Preview">
            <summary>
            Gets or sets the name of the preview method, executed synchronously before the async action.
            </summary>
            <value>The preview.</value>
        </member>
        <member name="T:Caliburn.MemoryManagement.WeakDictionary`2">
             <summary>
             A generic dictionary, which allows both its keys and values
             to be garbage collected if there are no other references
             to them than from the dictionary itself.
             </summary>
            
             <remarks>
             If either the key or value of a particular entry in the dictionary
             has been collected, then both the key and value become effectively
             unreachable. However, left-over WeakReference objects for the key
             and value will physically remain in the dictionary until
             RemoveCollectedEntries is called. This will lead to a discrepancy
             between the Count property and the number of iterations required
             to visit all of the elements of the dictionary using its
             enumerator or those of the Keys and Values collections. Similarly,
             CopyTo will copy fewer than Count elements in this situation.
             </remarks>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Caliburn.MemoryManagement.BaseDictionary`2" -->
        <member name="M:Caliburn.MemoryManagement.BaseDictionary`2.Clear">
            <summary>
            Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only. </exception>
        </member>
        <member name="M:Caliburn.MemoryManagement.BaseDictionary`2.Add(`0,`1)">
            <summary>
            Adds an element with the provided key and value to the <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </summary>
            <param name="key">The object to use as the key of the element to add.</param>
            <param name="value">The object to use as the value of the element to add.</param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="key"/> is null.</exception>
            <exception cref="T:System.ArgumentException">An element with the same key already exists in the <see cref="T:System.Collections.Generic.IDictionary`2"/>.</exception>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IDictionary`2"/> is read-only.</exception>
        </member>
        <member name="M:Caliburn.MemoryManagement.BaseDictionary`2.ContainsKey(`0)">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.IDictionary`2"/> contains an element with the specified key.
            </summary>
            <param name="key">The key to locate in the <see cref="T:System.Collections.Generic.IDictionary`2"/>.</param>
            <returns>
            true if the <see cref="T:System.Collections.Generic.IDictionary`2"/> contains an element with the key; otherwise, false.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="key"/> is null.</exception>
        </member>
        <member name="M:Caliburn.MemoryManagement.BaseDictionary`2.Remove(`0)">
            <summary>
            Removes the element with the specified key from the <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </summary>
            <param name="key">The key of the element to remove.</param>
            <returns>
            true if the element is successfully removed; otherwise, false.  This method also returns false if <paramref name="key"/> was not found in the original <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="key"/> is null.</exception>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IDictionary`2"/> is read-only.</exception>
        </member>
        <member name="M:Caliburn.MemoryManagement.BaseDictionary`2.TryGetValue(`0,`1@)">
            <summary>
            Gets the value associated with the specified key.
            </summary>
            <param name="key">The key whose value to get.</param>
            <param name="value">When this method returns, the value associated with the specified key, if the key is found; otherwise, the default value for the type of the <paramref name="value"/> parameter. This parameter is passed uninitialized.</param>
            <returns>
            true if the object that implements <see cref="T:System.Collections.Generic.IDictionary`2"/> contains an element with the specified key; otherwise, false.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="key"/> is null.</exception>
        </member>
        <member name="M:Caliburn.MemoryManagement.BaseDictionary`2.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Caliburn.MemoryManagement.BaseDictionary`2.Add(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.</exception>
        </member>
        <member name="M:Caliburn.MemoryManagement.BaseDictionary`2.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1"/> contains a specific value.
            </summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <returns>
            true if <paramref name="item"/> is found in the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false.
            </returns>
        </member>
        <member name="M:Caliburn.MemoryManagement.BaseDictionary`2.CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1"/> to an <see cref="T:System.Array"/>, starting at a particular <see cref="T:System.Array"/> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.ICollection`1"/>. The <see cref="T:System.Array"/> must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in <paramref name="array"/> at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="array"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="arrayIndex"/> is less than 0.</exception>
            <exception cref="T:System.ArgumentException">
            	<paramref name="array"/> is multidimensional.-or-<paramref name="arrayIndex"/> is equal to or greater than the length of <paramref name="array"/>.-or-The number of elements in the source <see cref="T:System.Collections.Generic.ICollection`1"/> is greater than the available space from <paramref name="arrayIndex"/> to the end of the destination <paramref name="array"/>.-or-Type <paramref name="T"/> cannot be cast automatically to the type of the destination <paramref name="array"/>.</exception>
        </member>
        <member name="M:Caliburn.MemoryManagement.BaseDictionary`2.Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <returns>
            true if <paramref name="item"/> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false. This method also returns false if <paramref name="item"/> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </returns>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.</exception>
        </member>
        <member name="M:Caliburn.MemoryManagement.BaseDictionary`2.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Caliburn.MemoryManagement.BaseDictionary`2.SetValue(`0,`1)">
            <summary>
            Sets the value.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
        </member>
        <member name="P:Caliburn.MemoryManagement.BaseDictionary`2.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <value></value>
            <returns>The number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"/>.</returns>
        </member>
        <member name="P:Caliburn.MemoryManagement.BaseDictionary`2.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
            </summary>
            <value></value>
            <returns>true if the <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only; otherwise, false.</returns>
        </member>
        <member name="P:Caliburn.MemoryManagement.BaseDictionary`2.Keys">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.ICollection`1"/> containing the keys of the <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </summary>
            <value></value>
            <returns>An <see cref="T:System.Collections.Generic.ICollection`1"/> containing the keys of the object that implements <see cref="T:System.Collections.Generic.IDictionary`2"/>.</returns>
        </member>
        <member name="P:Caliburn.MemoryManagement.BaseDictionary`2.Values">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.ICollection`1"/> containing the values in the <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </summary>
            <value></value>
            <returns>An <see cref="T:System.Collections.Generic.ICollection`1"/> containing the values in the object that implements <see cref="T:System.Collections.Generic.IDictionary`2"/>.</returns>
        </member>
        <member name="P:Caliburn.MemoryManagement.BaseDictionary`2.Item(`0)">
            <summary>
            Gets or sets the <see cref="!:TValue"/> with the specified key.
            </summary>
            <value></value>
        </member>
        <member name="M:Caliburn.MemoryManagement.BaseDictionary`2.Collection`1.CopyTo(`2[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1"/> to an <see cref="T:System.Array"/>, starting at a particular <see cref="T:System.Array"/> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.ICollection`1"/>. The <see cref="T:System.Array"/> must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in <paramref name="array"/> at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="array"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="arrayIndex"/> is less than 0.</exception>
            <exception cref="T:System.ArgumentException">
            	<paramref name="array"/> is multidimensional.-or-<paramref name="arrayIndex"/> is equal to or greater than the length of <paramref name="array"/>.-or-The number of elements in the source <see cref="T:System.Collections.Generic.ICollection`1"/> is greater than the available space from <paramref name="arrayIndex"/> to the end of the destination <paramref name="array"/>.-or-Type <paramref name="T"/> cannot be cast automatically to the type of the destination <paramref name="array"/>.</exception>
        </member>
        <member name="M:Caliburn.MemoryManagement.BaseDictionary`2.Collection`1.Contains(`2)">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1"/> contains a specific value.
            </summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <returns>
            true if <paramref name="item"/> is found in the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false.
            </returns>
        </member>
        <member name="M:Caliburn.MemoryManagement.BaseDictionary`2.Collection`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Caliburn.MemoryManagement.BaseDictionary`2.Collection`1.Remove(`2)">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <returns>
            true if <paramref name="item"/> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false. This method also returns false if <paramref name="item"/> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </returns>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.</exception>
        </member>
        <member name="M:Caliburn.MemoryManagement.BaseDictionary`2.Collection`1.Add(`2)">
            <summary>
            Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.</exception>
        </member>
        <member name="M:Caliburn.MemoryManagement.BaseDictionary`2.Collection`1.Clear">
            <summary>
            Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only. </exception>
        </member>
        <member name="M:Caliburn.MemoryManagement.BaseDictionary`2.Collection`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="P:Caliburn.MemoryManagement.BaseDictionary`2.Collection`1.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <value></value>
            <returns>The number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"/>.</returns>
        </member>
        <member name="P:Caliburn.MemoryManagement.BaseDictionary`2.Collection`1.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
            </summary>
            <value></value>
            <returns>true if the <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only; otherwise, false.</returns>
        </member>
        <member name="M:Caliburn.MemoryManagement.BaseDictionary`2.KeyCollection.Contains(`0)">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1"/> contains a specific value.
            </summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <returns>
            true if <paramref name="item"/> is found in the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false.
            </returns>
        </member>
        <member name="M:Caliburn.MemoryManagement.BaseDictionary`2.ValueCollection.#ctor(System.Collections.Generic.IDictionary{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.MemoryManagement.BaseDictionary`2.ValueCollection"/> class.
            </summary>
            <param name="dictionary">The dictionary.</param>
        </member>
        <member name="M:Caliburn.MemoryManagement.WeakDictionary`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.MemoryManagement.WeakDictionary`2"/> class.
            </summary>
        </member>
        <member name="M:Caliburn.MemoryManagement.WeakDictionary`2.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.MemoryManagement.WeakDictionary`2"/> class.
            </summary>
            <param name="capacity">The capacity.</param>
        </member>
        <member name="M:Caliburn.MemoryManagement.WeakDictionary`2.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.MemoryManagement.WeakDictionary`2"/> class.
            </summary>
            <param name="comparer">The comparer.</param>
        </member>
        <member name="M:Caliburn.MemoryManagement.WeakDictionary`2.#ctor(System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.MemoryManagement.WeakDictionary`2"/> class.
            </summary>
            <param name="capacity">The capacity.</param>
            <param name="comparer">The comparer.</param>
        </member>
        <member name="M:Caliburn.MemoryManagement.WeakDictionary`2.Add(`0,`1)">
            <summary>
            Adds an element with the provided key and value to the <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </summary>
            <param name="key">The object to use as the key of the element to add.</param>
            <param name="value">The object to use as the value of the element to add.</param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="key"/> is null.</exception>
            <exception cref="T:System.ArgumentException">An element with the same key already exists in the <see cref="T:System.Collections.Generic.IDictionary`2"/>.</exception>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IDictionary`2"/> is read-only.</exception>
        </member>
        <member name="M:Caliburn.MemoryManagement.WeakDictionary`2.ContainsKey(`0)">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.IDictionary`2"/> contains an element with the specified key.
            </summary>
            <param name="key">The key to locate in the <see cref="T:System.Collections.Generic.IDictionary`2"/>.</param>
            <returns>
            true if the <see cref="T:System.Collections.Generic.IDictionary`2"/> contains an element with the key; otherwise, false.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="key"/> is null.</exception>
        </member>
        <member name="M:Caliburn.MemoryManagement.WeakDictionary`2.Remove(`0)">
            <summary>
            Removes the element with the specified key from the <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </summary>
            <param name="key">The key of the element to remove.</param>
            <returns>
            true if the element is successfully removed; otherwise, false.  This method also returns false if <paramref name="key"/> was not found in the original <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="key"/> is null.</exception>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IDictionary`2"/> is read-only.</exception>
        </member>
        <member name="M:Caliburn.MemoryManagement.WeakDictionary`2.TryGetValue(`0,`1@)">
            <summary>
            Gets the value associated with the specified key.
            </summary>
            <param name="key">The key whose value to get.</param>
            <param name="value">When this method returns, the value associated with the specified key, if the key is found; otherwise, the default value for the type of the <paramref name="value"/> parameter. This parameter is passed uninitialized.</param>
            <returns>
            true if the object that implements <see cref="T:System.Collections.Generic.IDictionary`2"/> contains an element with the specified key; otherwise, false.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="key"/> is null.</exception>
        </member>
        <member name="M:Caliburn.MemoryManagement.WeakDictionary`2.SetValue(`0,`1)">
            <summary>
            Sets the value.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Caliburn.MemoryManagement.WeakDictionary`2.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Caliburn.MemoryManagement.WeakDictionary`2.RemoveCollectedEntries">
            <summary>
            Removes the left-over weak references for entries in the dictionary
            whose key or value has already been reclaimed by the garbage
            collector. This will reduce the dictionary's Count by the number
            of dead key-value pairs that were eliminated.
            </summary>
        </member>
        <member name="P:Caliburn.MemoryManagement.WeakDictionary`2.Count">
             <summary>
             Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"/>.
             </summary>
             <value></value>
             <returns>The number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"/>.</returns>
            <remarks>
             WARNING: The count returned here may include entries for which
             either the key or value objects have already been garbage
             collected. Call RemoveCollectedEntries to weed out collected
             entries and update the count accordingly.
             </remarks>
        </member>
        <member name="T:Caliburn.Services.IPlatformCapabilities">
            <summary>
            A service that abstracts various underlying platform capabilites such as message boxes
            and common dialoges.
            </summary>
        </member>
        <member name="M:Caliburn.Services.IPlatformCapabilities.CreateOpenFileDialog">
            <summary>
            Creates an open file dialog.
            </summary>
            <returns>An open file dialog.</returns>
        </member>
        <member name="M:Caliburn.Services.IPlatformCapabilities.CreateSaveFileDialog">
            <summary>
            Creates a save file dialog.
            </summary>
            <returns>A save file dialog.</returns>
        </member>
        <member name="P:Caliburn.Services.IPlatformCapabilities.MessageBox">
            <summary>
            Gets the message box service.
            </summary>
            <value>The message box.</value>
        </member>
        <member name="T:Caliburn.Modules.IModuleRepository">
            <summary>
            A module store.
            </summary>
        </member>
        <member name="M:Caliburn.Modules.IModuleRepository.Add(Caliburn.Modules.IModuleController)">
            <summary>
            Adds the specified module.
            </summary>
            <param name="module">The module.</param>
        </member>
        <member name="M:Caliburn.Modules.IModuleRepository.GetByName(System.String)">
            <summary>
            Gets the <see cref="T:Caliburn.Modules.IModuleController"/> for tne named module.
            </summary>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="M:Caliburn.Modules.IModuleRepository.Initialize">
            <summary>
            Initializes all the modules.
            </summary>
        </member>
        <member name="M:Caliburn.Modules.IModuleRepository.Shutdown">
            <summary>
            Shuts down all the modules.
            </summary>
        </member>
        <member name="P:Caliburn.Modules.IModuleRepository.Count">
            <summary>
            Gets the count.
            </summary>
            <value>The count.</value>
        </member>
        <member name="T:Caliburn.Services.IModuleLocator">
            <summary>
            A service capable of locating modules.
            </summary>
        </member>
        <member name="M:Caliburn.Services.IModuleLocator.Search">
            <summary>
            Searches for modules.
            </summary>
        </member>
        <member name="T:Caliburn.Events.Aggregation.EventAggregator">
            <summary>
            An implementation of <see cref="T:Caliburn.Events.Aggregation.IEventAggregator"/> that enables loosely coupled event aggregation through a strongly typed mechanism.
            </summary>
        </member>
        <member name="T:Caliburn.Events.Aggregation.IEventAggregator">
            <summary>
            A service that enables loosely coupled event aggregation through a strongly typed mechanism.
            </summary>
        </member>
        <member name="M:Caliburn.Events.Aggregation.IEventAggregator.AddListener(System.Object)">
            <summary>
            Registers a class as a listener for events.
            </summary>
            <param name="listener">The listener.</param>
        </member>
        <member name="M:Caliburn.Events.Aggregation.IEventAggregator.RemoveListener(System.Object)">
            <summary>
            Removes a class from the lists of event listeners.
            </summary>
            <param name="listener">The listener.</param>
        </member>
        <member name="M:Caliburn.Events.Aggregation.IEventAggregator.Send``1(``0,System.Boolean)">
            <summary>
            Sends the specified message to registered listeners.
            </summary>
            <typeparam name="T">The message type.</typeparam>
            <param name="message">The message.</param>
            <param name="deliverAsynchronously">if set to <c>true</c> the message will be delivered asynchronously</param>
        </member>
        <member name="M:Caliburn.Events.Aggregation.EventAggregator.AddListener(System.Object)">
            <summary>
            Registers a class as a listener for events.
            </summary>
            <param name="listener">The listener.</param>
        </member>
        <member name="M:Caliburn.Events.Aggregation.EventAggregator.RemoveListener(System.Object)">
            <summary>
            Removes a class from the lists of event listeners.
            </summary>
            <param name="listener">The listener.</param>
        </member>
        <member name="M:Caliburn.Events.Aggregation.EventAggregator.Send``1(``0,System.Boolean)">
            <summary>
            Sends the specified message to registered listeners.
            </summary>
            <typeparam name="T">The message type.</typeparam>
            <param name="message">The message.</param>
            <param name="deliverAsynchronously">if set to <c>true</c> the message will be delivered asynchronously</param>
        </member>
        <member name="T:Caliburn.Controls.Transitions.TwoWayTransitionSelector">
            <summary>
            Enables simple two way transitions.
            </summary>
        </member>
        <member name="T:Caliburn.Controls.Transitions.TransitionSelector">
            <summary>
            Enables the creation of custom code for determining which transition should execute.
            </summary>
        </member>
        <member name="M:Caliburn.Controls.Transitions.TransitionSelector.SelectTransition(System.Object,System.Object)">
            <summary>
            Selects the transition.
            </summary>
            <param name="oldContent">The old content.</param>
            <param name="newContent">The new content.</param>
            <returns></returns>
        </member>
        <member name="F:Caliburn.Controls.Transitions.TwoWayTransitionSelector.BackwardProperty">
            <summary>
            A dependency property that represents the Backward property.
            </summary>
        </member>
        <member name="F:Caliburn.Controls.Transitions.TwoWayTransitionSelector.DirectionProperty">
            <summary>
            A dependency property that represents the Direction property.
            </summary>
        </member>
        <member name="F:Caliburn.Controls.Transitions.TwoWayTransitionSelector.ForwardProperty">
            <summary>
            A dependency property that represents the Forward property.
            </summary>
        </member>
        <member name="P:Caliburn.Controls.Transitions.TwoWayTransitionSelector.Forward">
            <summary>
            Gets or sets the forward transition.
            </summary>
            <value>The forward.</value>
        </member>
        <member name="P:Caliburn.Controls.Transitions.TwoWayTransitionSelector.Backward">
            <summary>
            Gets or sets the backward transition.
            </summary>
            <value>The backward.</value>
        </member>
        <member name="P:Caliburn.Controls.Transitions.TwoWayTransitionSelector.Direction">
            <summary>
            Gets or sets the current direction.
            </summary>
            <value>The direction.</value>
        </member>
        <member name="T:Caliburn.Actions.AsynchronousInfo">
            <summary>
            Used to store information during the asynchronous execution of an action.
            </summary>
        </member>
        <member name="M:Caliburn.Actions.AsynchronousInfo.#ctor(System.Windows.DependencyObject,Caliburn.Messaging.ActionMessage,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.Actions.AsynchronousInfo"/> class.
            </summary>
            <param name="messageSource">The message source.</param>
            <param name="message">The message.</param>
            <param name="target">The target.</param>
        </member>
        <member name="P:Caliburn.Actions.AsynchronousInfo.Message">
            <summary>
            Gets the message.
            </summary>
            <value>The message.</value>
        </member>
        <member name="P:Caliburn.Actions.AsynchronousInfo.MessageSource">
            <summary>
            Gets the message source.
            </summary>
            <value>The message source.</value>
        </member>
        <member name="P:Caliburn.Actions.AsynchronousInfo.Target">
            <summary>
            Gets the target.
            </summary>
            <value>The target.</value>
        </member>
        <member name="T:Caliburn.Testability.StubPlatformCapabilities">
            <summary>
            A stub version of <see cref="T:Caliburn.Services.IPlatformCapabilities"/>.
            </summary>
        </member>
        <member name="M:Caliburn.Testability.StubPlatformCapabilities.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.Testability.StubPlatformCapabilities"/> class.
            </summary>
        </member>
        <member name="M:Caliburn.Testability.StubPlatformCapabilities.CreateOpenFileDialog">
            <summary>
            Creates an open file dialog.
            </summary>
            <returns>An open file dialog.</returns>
        </member>
        <member name="M:Caliburn.Testability.StubPlatformCapabilities.CreateSaveFileDialog">
            <summary>
            Creates a save file dialog.
            </summary>
            <returns>A save file dialog.</returns>
        </member>
        <member name="P:Caliburn.Testability.StubPlatformCapabilities.MessageBox">
            <summary>
            Gets the message box service.
            </summary>
            <value>The message box.</value>
        </member>
        <member name="P:Caliburn.Testability.StubPlatformCapabilities.OpenFileDialog">
            <summary>
            Gets or sets the open file dialog.
            </summary>
            <value>The open file dialog.</value>
        </member>
        <member name="P:Caliburn.Testability.StubPlatformCapabilities.SaveFileDialog">
            <summary>
            Gets or sets the save file dialog.
            </summary>
            <value>The save file dialog.</value>
        </member>
        <member name="T:Caliburn.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Caliburn.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Caliburn.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="T:Caliburn.Metadata.MetadataProvider">
            <summary>
            An attribute base for custom discoverable metadata.
            </summary>
        </member>
        <member name="T:Caliburn.Events.LooseEvent">
            <summary>
            A factory for creating generic event handlers.
            </summary>
        </member>
        <member name="M:Caliburn.Events.LooseEvent.Wire(System.Object,System.String)">
            <summary>
            Wires an event handler to the sender for the specified event.
            </summary>
            <param name="sender">The sender.</param>
            <param name="eventName">Name of the event.</param>
            <returns>The event handler.</returns>
        </member>
        <member name="M:Caliburn.Events.LooseEvent.Wire(System.Object,System.Reflection.EventInfo)">
            <summary>
            Wires an event handler to the sender for the specified event.
            </summary>
            <param name="sender">The sender.</param>
            <param name="eventInfo">The event info.</param>
            <returns>The event handler.</returns>
        </member>
        <member name="T:Caliburn.Views.ViewManagerExtensions">
            <summary>
            Extends the IViewManager service.
            </summary>
        </member>
        <member name="M:Caliburn.Views.ViewManagerExtensions.ChangeView(Caliburn.Services.IViewManager,System.Object,System.String)">
            <summary>
            Changes the current view for a presenter hosted in a <see cref="T:Caliburn.Controls.PresenterHost"/>.
            </summary>
            <param name="manager">The manager.</param>
            <param name="presenter">The presenter.</param>
            <param name="viewKey">The view key.</param>
        </member>
        <member name="M:Caliburn.Views.ViewManagerExtensions.ChangeView(Caliburn.Services.IViewManager,System.Object,System.Type)">
            <summary>
            Changes the current view for a presenter hosted in a <see cref="T:Caliburn.Controls.PresenterHost"/>.
            </summary>
            <param name="manager">The manager.</param>
            <param name="presenter">The presenter.</param>
            <param name="viewType">Type of the view.</param>
        </member>
        <member name="T:Caliburn.StateManagement.StateManager">
            <summary>
            An implementation of <see cref="T:Caliburn.Services.IStateManager"/> that manages persistable application state.
            </summary>
        </member>
        <member name="T:Caliburn.Services.IStateManager">
            <summary>
            Manages aspects of persistable application state.
            </summary>
        </member>
        <member name="M:Caliburn.Services.IStateManager.SetValue``1(System.String,``0)">
            <summary>
            Sets a persistent value.
            </summary>
            <typeparam name="T">The type of value to store.</typeparam>
            <param name="key">The key to store the value with.</param>
            <param name="value">The stored value.</param>
        </member>
        <member name="M:Caliburn.Services.IStateManager.GetValue``1(System.String)">
            <summary>
            Gets a persistent value.
            </summary>
            <typeparam name="T">The type of value to return.</typeparam>
            <param name="key">The key that the value was stored with.</param>
            <returns>The stored value.</returns>
        </member>
        <member name="M:Caliburn.Services.IStateManager.Load">
            <summary>
            Loads the state.
            </summary>
        </member>
        <member name="M:Caliburn.Services.IStateManager.Save">
            <summary>
            Saves the state.
            </summary>
        </member>
        <member name="P:Caliburn.Services.IStateManager.IsLoaded">
            <summary>
            Gets a value indicating whether the state has been loaded from the persistence medium.
            </summary>
            <value><c>true</c> if te state is loaded; otherwise, <c>false</c>.</value>
        </member>
        <member name="E:Caliburn.Services.IStateManager.Loaded">
            <summary>
            Occurs after the state has been loaded from the persistence medium.
            </summary>
        </member>
        <member name="E:Caliburn.Services.IStateManager.Saving">
            <summary>
            Occurs before the state is about to be saved to the persistence medium.
            </summary>
        </member>
        <member name="M:Caliburn.StateManagement.StateManager.#ctor(Caliburn.StateManagement.IStateSerializer)">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.StateManagement.StateManager"/> class.
            </summary>
            <param name="serializer">The serializer.</param>
        </member>
        <member name="M:Caliburn.StateManagement.StateManager.GetValue``1(System.String)">
            <summary>
            Gets a persistent value.
            </summary>
            <typeparam name="T">The type of value to return.</typeparam>
            <param name="key">The key that the value was stored with.</param>
            <returns>The stored value.</returns>
        </member>
        <member name="M:Caliburn.StateManagement.StateManager.SetValue``1(System.String,``0)">
            <summary>
            Sets a persistent value.
            </summary>
            <typeparam name="T">The type of value to store.</typeparam>
            <param name="key">The key to store the value with.</param>
            <param name="value">The stored value.</param>
        </member>
        <member name="M:Caliburn.StateManagement.StateManager.Load">
            <summary>
            Loads the state.
            </summary>
        </member>
        <member name="M:Caliburn.StateManagement.StateManager.Save">
            <summary>
            Saves the state.
            </summary>
        </member>
        <member name="P:Caliburn.StateManagement.StateManager.IsLoaded">
            <summary>
            Gets a value indicating whether the state has been loaded from the persistence medium.
            </summary>
            <value><c>true</c> if te state is loaded; otherwise, <c>false</c>.</value>
        </member>
        <member name="E:Caliburn.StateManagement.StateManager.Loaded">
            <summary>
            Occurs after the state has been loaded from the persistence medium.
            </summary>
        </member>
        <member name="E:Caliburn.StateManagement.StateManager.Saving">
            <summary>
            Occurs before the state is about to be saved to the persistence medium.
            </summary>
        </member>
        <member name="T:Caliburn.Composition.CompositionManager">
            <summary>
            An implementation of <see cref="T:Caliburn.Services.ICompositionManager"/> that manages various aspects of composite views.
            </summary>
        </member>
        <member name="M:Caliburn.Composition.Scope.SetValue(System.Object,System.Object)">
            <summary>
            Sets the value.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Caliburn.Composition.Scope.GetValue``1(System.Object)">
            <summary>
            Gets the value.
            </summary>
            <typeparam name="T">The type of the value.</typeparam>
            <param name="key">The key.</param>
            <returns>The value.</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Caliburn.Composition.Scope.RegisterComposite(System.String,System.Object)" -->
        <member name="M:Caliburn.Composition.Scope.GetComposite(System.String)">
            <summary>
            Gets the composite.
            </summary>
            <param name="path">The path to the composite.</param>
            <returns>The composite.</returns>
        </member>
        <member name="M:Caliburn.Composition.Scope.RegisterTransformer(System.String,Caliburn.Composition.ITransformer)">
            <summary>
            Registers the transformer for the names composite.
            </summary>
            <param name="compositeKey">The key.</param>
            <param name="transformer">The transformer.</param>
        </member>
        <member name="M:Caliburn.Composition.Scope.GetTransformer(System.String)">
            <summary>
            Gets the transformer.
            </summary>
            <param name="compositeKey">The composite key for which the <see cref="T:Caliburn.Composition.ITransformer"/> is registered.</param>
            <returns>The registered transformer or default.</returns>
        </member>
        <member name="M:Caliburn.Composition.CompositionManager.CreateScope(System.Object)">
            <summary>
            Creates an <see cref="T:Caliburn.Services.IScope"/> for the object.
            </summary>
            <param name="scope">The object that defines the scope.</param>
            <returns>The created <see cref="T:Caliburn.Services.IScope"/>.</returns>
        </member>
        <member name="M:Caliburn.Composition.CompositionManager.GetScopeForView(System.Windows.DependencyObject)">
            <summary>
            Gets the scope for view.
            </summary>
            <param name="target">The target.</param>
            <returns></returns>
        </member>
        <member name="M:Caliburn.Composition.CompositionManager.GetScopeForPresenter(System.Object)">
            <summary>
            Gets the scope for presenter.
            </summary>
            <param name="target">The target.</param>
            <returns></returns>
        </member>
        <member name="T:Caliburn.CaliburnApplication">
            <summary>
            The bootstrapper for all of Caliburn's services.
            </summary>
        </member>
        <member name="M:Caliburn.CaliburnApplication.Start">
            <summary>
            Starts Caliburn with a simple, default configuration.
            </summary>
            <remarks>This is not recommended for most commercial projects.</remarks>
        </member>
        <member name="M:Caliburn.CaliburnApplication.Start(Caliburn.Configuration.IConfiguration)">
            <summary>
            Starts Caliburn with the specified configuration.
            </summary>
            <param name="configuration">The configuration.</param>
        </member>
        <member name="T:Caliburn.Messaging.MessageCommand">
            <summary>
            A command capable of sending an <see cref="T:Caliburn.Messaging.MessageBase"/>.
            </summary>
        </member>
        <member name="M:Caliburn.Messaging.MessageCommand.#ctor(System.Windows.DependencyObject,Caliburn.Messaging.MessageBase,System.Func{System.Object,System.Boolean})">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.Messaging.MessageCommand"/> class.
            </summary>
            <param name="source">The source.</param>
            <param name="message">The message.</param>
            <param name="canExecute">A function determining whether the command can execute.</param>
        </member>
        <member name="M:Caliburn.Messaging.MessageCommand.Execute(System.Object)">
            <summary>
            Defines the method to be called when the command is invoked.
            </summary>
            <param name="parameter">Data used by the command.  If the command does not require data to be passed, this object can be set to null.</param>
        </member>
        <member name="M:Caliburn.Messaging.MessageCommand.CanExecute(System.Object)">
            <summary>
            Defines the method that determines whether the command can execute in its current state.
            </summary>
            <param name="parameter">Data used by the command.  If the command does not require data to be passed, this object can be set to null.</param>
            <returns>
            true if this command can be executed; otherwise, false.
            </returns>
        </member>
        <member name="E:Caliburn.Messaging.MessageCommand.CanExecuteChanged">
            <summary>
            Occurs when changes occur that affect whether or not the command should execute.
            </summary>
        </member>
        <member name="T:Caliburn.Services.IMessageBox">
            <summary>
            Displays a message box.
            </summary>
        </member>
        <member name="M:Caliburn.Services.IMessageBox.Show(System.String)">
            <summary>
            Displays a message box that has a message and that returns a result.
            </summary>
            <param name="messageBoxText">The message box text.</param>
            <returns>A value that specifies which message box button is clicked by the user.</returns>
        </member>
        <member name="M:Caliburn.Services.IMessageBox.Show(System.String,System.String)">
            <summary>
            Displays a message box that has a message and title bar caption; and that returns a result.c
            </summary>
            <param name="messageBoxText">The message box text.</param>
            <param name="caption">The caption.</param>
            <returns>A value that specifies which message box button is clicked by the user.</returns>
        </member>
        <member name="M:Caliburn.Services.IMessageBox.Show(System.String,System.String,System.Windows.MessageBoxButton)">
            <summary>
            Displays a message box that has a message, title bar caption, and button; and that returns a result.
            </summary>
            <param name="messageBoxText">The message box text.</param>
            <param name="caption">The caption.</param>
            <param name="button">The button.</param>
            <returns>A value that specifies which message box button is clicked by the user.</returns>
        </member>
        <member name="M:Caliburn.Services.IMessageBox.Show(System.String,System.String,System.Windows.MessageBoxButton,System.Windows.MessageBoxImage)">
            <summary>
            Displays a message box that has a message, title bar caption, button, and icon; and that returns a result..
            </summary>
            <param name="messageBoxText">The message box text.</param>
            <param name="caption">The caption.</param>
            <param name="button">The button.</param>
            <param name="icon">The icon.</param>
            <returns>A value that specifies which message box button is clicked by the user.</returns>
        </member>
        <member name="M:Caliburn.Services.IMessageBox.Show(System.String,System.String,System.Windows.MessageBoxButton,System.Windows.MessageBoxImage,System.Windows.MessageBoxResult)">
            <summary>
            Displays a message box that has a message, title bar caption, button, and icon; 
            and that accepts a default message box result and returns a result.
            </summary>
            <param name="messageBoxText">The message box text.</param>
            <param name="caption">The caption.</param>
            <param name="button">The button.</param>
            <param name="icon">The icon.</param>
            <param name="defaultResult">The default result.</param>
            <returns>A value that specifies which message box button is clicked by the user.</returns>
        </member>
        <member name="M:Caliburn.Services.IMessageBox.Show(System.String,System.String,System.Windows.MessageBoxButton,System.Windows.MessageBoxImage,System.Windows.MessageBoxResult,System.Windows.MessageBoxOptions)">
            <summary>
            Displays a message box that has a message, title bar caption, button, and icon; 
            and that accepts a default message box result, complies with the specified options, and returns a result.
            </summary>
            <param name="messageBoxText">The message box text.</param>
            <param name="caption">The caption.</param>
            <param name="button">The button.</param>
            <param name="icon">The icon.</param>
            <param name="defaultResult">The default result.</param>
            <param name="options">The options.</param>
            <returns>A value that specifies which message box button is clicked by the user.</returns>
        </member>
        <member name="T:Caliburn.Modules.IModule">
            <summary>
            Represents a runtime loadable module.
            </summary>
        </member>
        <member name="M:Caliburn.Modules.IModule.Initialize">
            <summary>
            Initializes this module.
            </summary>
        </member>
        <member name="M:Caliburn.Modules.IModule.Shutdown">
            <summary>
            Shuts down this module.
            </summary>
        </member>
        <member name="T:Caliburn.Metadata.ElementDefaults`2">
            <summary>
            A generics based implementation if <see cref="T:Caliburn.Metadata.ElementDefaults"/>.
            </summary>
            <typeparam name="T">The type to which the defaults apply.</typeparam>
            <typeparam name="K">The type of <see cref="T:Caliburn.Composition.IComposite"/> used for the element type.</typeparam>
        </member>
        <member name="T:Caliburn.Metadata.ElementDefaults">
            <summary>
            Enables default functionality for UI-related elements.
            </summary>
        </member>
        <member name="M:Caliburn.Metadata.ElementDefaults.#ctor(System.Type,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.Metadata.ElementDefaults"/> class.
            </summary>
            <param name="elementType">Type of the element.</param>
            <param name="defaultEventName">Default name of the event.</param>
        </member>
        <member name="M:Caliburn.Metadata.ElementDefaults.CreateCompositeProxy(System.Object)">
            <summary>
            Creates an instance of <see cref="T:Caliburn.Composition.IComposite"/> capable of manipulating the the target.
            </summary>
            <param name="target">The target.</param>
            <returns>The composite.</returns>
        </member>
        <member name="M:Caliburn.Metadata.ElementDefaults.CreatePersister(System.Object)">
            <summary>
            Creates an instance of <see cref="T:Caliburn.StateManagement.IPersister"/> capable of saving properties of the target.
            </summary>
            <param name="target">The target.</param>
            <returns>The persister.</returns>
        </member>
        <member name="M:Caliburn.Metadata.ElementDefaults.GetDefaultValue(System.Object)">
            <summary>
            Gets the default value from the target.
            </summary>
            <param name="target">The target object.</param>
            <returns>The value.</returns>
        </member>
        <member name="M:Caliburn.Metadata.ElementDefaults.SetDefaultValue(System.Object,System.Object)">
            <summary>
            Sets the default value on the target.
            </summary>
            <param name="target">The target.</param>
            <param name="value">The value.</param>
        </member>
        <member name="P:Caliburn.Metadata.ElementDefaults.ElementType">
            <summary>
            Gets the type of the element to which the defaults apply.
            </summary>
            <value>The type of the element.</value>
        </member>
        <member name="P:Caliburn.Metadata.ElementDefaults.DefaultEventName">
            <summary>
            Gets the name of the default event used for UI wireup.
            </summary>
            <value>The event name.</value>
        </member>
        <member name="M:Caliburn.Metadata.ElementDefaults`2.#ctor(System.String,System.Func{`0,System.Object},System.Action{`0,System.Object},System.Func{Caliburn.StateManagement.IPersister})">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.Metadata.ElementDefaults`2"/> class.
            </summary>
            <param name="defaultEventName">Default name of the event.</param>
            <param name="getValue">A function that can get the default value for the type.</param>
            <param name="setValue">An action that can set the default value for the type.</param>
            <param name="createPersister">A function that can create a persister for the type.</param>
        </member>
        <member name="M:Caliburn.Metadata.ElementDefaults`2.GetDefaultValue(System.Object)">
            <summary>
            Gets the default value from the target.
            </summary>
            <param name="target">The target object.</param>
            <returns>The value.</returns>
        </member>
        <member name="M:Caliburn.Metadata.ElementDefaults`2.SetDefaultValue(System.Object,System.Object)">
            <summary>
            Sets the default value on the target.
            </summary>
            <param name="target">The target.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Caliburn.Metadata.ElementDefaults`2.CreateCompositeProxy(System.Object)">
            <summary>
            Creates an instance of <see cref="T:Caliburn.Composition.IComposite"/> capable of manipulating the the target.
            </summary>
            <param name="target">The target.</param>
            <returns>The composite.</returns>
        </member>
        <member name="M:Caliburn.Metadata.ElementDefaults`2.CreatePersister(System.Object)">
            <summary>
            Creates an instance of <see cref="T:Caliburn.StateManagement.IPersister"/> capable of saving properties of the target.
            </summary>
            <param name="target">The target.</param>
            <returns>The persister.</returns>
        </member>
        <member name="T:Caliburn.Events.Brokering.EventExtension">
            <summary>
            A markup extension that aids in the creation of an <see cref="T:Caliburn.Events.Brokering.EventMessage"/>.
            </summary>
        </member>
        <member name="M:Caliburn.Events.Brokering.EventExtension.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.Events.Brokering.EventExtension"/> class.
            </summary>
        </member>
        <member name="M:Caliburn.Events.Brokering.EventExtension.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.Events.Brokering.EventExtension"/> class.
            </summary>
            <param name="eventNodeName">Name of the event node.</param>
        </member>
        <member name="M:Caliburn.Events.Brokering.EventExtension.ProvideValue(System.IServiceProvider)">
            <summary>
            When implemented in a derived class, returns an object that is set as the value of the target property for this markup extension.
            </summary>
            <param name="serviceProvider">Object that can provide services for the markup extension.</param>
            <returns>
            The object value to set on the property where the extension is applied.
            </returns>
        </member>
        <member name="P:Caliburn.Events.Brokering.EventExtension.Trigger">
            <summary>
            Gets or sets the trigger.
            </summary>
            <value>The trigger.</value>
        </member>
        <member name="P:Caliburn.Events.Brokering.EventExtension.ParamValue">
            <summary>
            Sets the param value.
            </summary>
            <value>The param value.</value>
        </member>
        <member name="P:Caliburn.Events.Brokering.EventExtension.ParamBinding">
            <summary>
            Sets the param binding.
            </summary>
            <value>The param binding.</value>
        </member>
        <member name="P:Caliburn.Events.Brokering.EventExtension.Publication">
            <summary>
            Gets or sets the publication that this message will raise.
            </summary>
            <value>The publication.</value>
        </member>
        <member name="T:Caliburn.Composition.Proxies.SelectorProxy">
            <summary>
            A composite proxy capable of representing inheritors of <see cref="T:System.Windows.Controls.Primitives.Selector"/>.
            </summary>
        </member>
        <member name="T:Caliburn.Composition.Proxies.ItemsControlProxy">
            <summary>
            A composite proxy capable of representing inheritors of <see cref="T:System.Windows.Controls.ItemsControl"/>.
            </summary>
        </member>
        <member name="T:Caliburn.Composition.IComposite">
            <summary>
            Represents a composite UI.
            </summary>
        </member>
        <member name="M:Caliburn.Composition.IComposite.SetVisiblity(System.Windows.Visibility)">
            <summary>
            Sets the visiblity.
            </summary>
            <param name="visibility">The visibility.</param>
        </member>
        <member name="M:Caliburn.Composition.IComposite.Add(System.Object)">
            <summary>
            Adds the specified element.
            </summary>
            <param name="element">The element.</param>
        </member>
        <member name="M:Caliburn.Composition.IComposite.Insert(System.Int32,System.Object)">
            <summary>
            Inserts the specified index.
            </summary>
            <param name="index">The index.</param>
            <param name="element">The element.</param>
        </member>
        <member name="M:Caliburn.Composition.IComposite.Remove(System.Object)">
            <summary>
            Removes the specified element.
            </summary>
            <param name="element">The element.</param>
        </member>
        <member name="M:Caliburn.Composition.IComposite.Show(System.Object)">
            <summary>
            Shows the specified element.
            </summary>
            <param name="element">The element.</param>
        </member>
        <member name="P:Caliburn.Composition.IComposite.Target">
            <summary>
            Gets or sets the actual target UI.
            </summary>
            <value>The target.</value>
        </member>
        <member name="P:Caliburn.Composition.IComposite.ComponentCount">
            <summary>
            Gets the component count.
            </summary>
            <value>The component count.</value>
        </member>
        <member name="M:Caliburn.Composition.Proxies.ItemsControlProxy.SetVisiblity(System.Windows.Visibility)">
            <summary>
            Sets the visiblity.
            </summary>
            <param name="visibility">The visibility.</param>
        </member>
        <member name="M:Caliburn.Composition.Proxies.ItemsControlProxy.Add(System.Object)">
            <summary>
            Adds the specified element.
            </summary>
            <param name="element">The element.</param>
        </member>
        <member name="M:Caliburn.Composition.Proxies.ItemsControlProxy.Insert(System.Int32,System.Object)">
            <summary>
            Inserts the specified index.
            </summary>
            <param name="index">The index.</param>
            <param name="element">The element.</param>
        </member>
        <member name="M:Caliburn.Composition.Proxies.ItemsControlProxy.Remove(System.Object)">
            <summary>
            Removes the specified element.
            </summary>
            <param name="element">The element.</param>
        </member>
        <member name="M:Caliburn.Composition.Proxies.ItemsControlProxy.Show(System.Object)">
            <summary>
            Shows the specified element.
            </summary>
            <param name="element">The element.</param>
        </member>
        <member name="P:Caliburn.Composition.Proxies.ItemsControlProxy.Target">
            <summary>
            Gets or sets the actual target UI.
            </summary>
            <value>The target.</value>
        </member>
        <member name="P:Caliburn.Composition.Proxies.ItemsControlProxy.ComponentCount">
            <summary>
            Gets the component count.
            </summary>
            <value>The component count.</value>
        </member>
        <member name="M:Caliburn.Composition.Proxies.SelectorProxy.Show(System.Object)">
            <summary>
            Shows the specified element.
            </summary>
            <param name="element">The element.</param>
        </member>
        <member name="T:Caliburn.Composition.Proxies.DecoratorProxy">
            <summary>
            A composite proxy capable of representing inheritors of <see cref="T:System.Windows.Controls.Decorator"/>.
            </summary>
        </member>
        <member name="M:Caliburn.Composition.Proxies.DecoratorProxy.SetVisiblity(System.Windows.Visibility)">
            <summary>
            Sets the visiblity.
            </summary>
            <param name="visibility">The visibility.</param>
        </member>
        <member name="M:Caliburn.Composition.Proxies.DecoratorProxy.Add(System.Object)">
            <summary>
            Adds the specified element.
            </summary>
            <param name="element">The element.</param>
        </member>
        <member name="M:Caliburn.Composition.Proxies.DecoratorProxy.Insert(System.Int32,System.Object)">
            <summary>
            Inserts the specified index.
            </summary>
            <param name="index">The index.</param>
            <param name="element">The element.</param>
        </member>
        <member name="M:Caliburn.Composition.Proxies.DecoratorProxy.Remove(System.Object)">
            <summary>
            Removes the specified element.
            </summary>
            <param name="element">The element.</param>
        </member>
        <member name="M:Caliburn.Composition.Proxies.DecoratorProxy.Show(System.Object)">
            <summary>
            Shows the specified element.
            </summary>
            <param name="element">The element.</param>
        </member>
        <member name="P:Caliburn.Composition.Proxies.DecoratorProxy.Target">
            <summary>
            Gets or sets the actual target UI.
            </summary>
            <value>The target.</value>
        </member>
        <member name="P:Caliburn.Composition.Proxies.DecoratorProxy.ComponentCount">
            <summary>
            Gets the component count.
            </summary>
            <value>The component count.</value>
        </member>
        <member name="T:Caliburn.CaliburnParserContext">
            <summary>
            A custom <see cref="T:System.Windows.Markup.ParserContext"/> for Caliburn.
            </summary>
        </member>
        <member name="T:Caliburn.Testability.StubMessageBox">
            <summary>
            A stub version of <see cref="T:Caliburn.Services.IMessageBox"/>.
            </summary>
        </member>
        <member name="M:Caliburn.Testability.StubMessageBox.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.Testability.StubMessageBox"/> class.
            </summary>
        </member>
        <member name="M:Caliburn.Testability.StubMessageBox.#ctor(System.Windows.MessageBoxResult)">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.Testability.StubMessageBox"/> class.
            </summary>
            <param name="result">The result.</param>
        </member>
        <member name="M:Caliburn.Testability.StubMessageBox.Show(System.String)">
            <summary>
            Displays a message box that has a message and that returns a result.
            </summary>
            <param name="messageBoxText">The message box text.</param>
            <returns>
            A value that specifies which message box button is clicked by the user.
            </returns>
        </member>
        <member name="M:Caliburn.Testability.StubMessageBox.Show(System.String,System.String)">
            <summary>
            Displays a message box that has a message and title bar caption; and that returns a result.c
            </summary>
            <param name="messageBoxText">The message box text.</param>
            <param name="caption">The caption.</param>
            <returns>
            A value that specifies which message box button is clicked by the user.
            </returns>
        </member>
        <member name="M:Caliburn.Testability.StubMessageBox.Show(System.String,System.String,System.Windows.MessageBoxButton)">
            <summary>
            Displays a message box that has a message, title bar caption, and button; and that returns a result.
            </summary>
            <param name="messageBoxText">The message box text.</param>
            <param name="caption">The caption.</param>
            <param name="button">The button.</param>
            <returns>
            A value that specifies which message box button is clicked by the user.
            </returns>
        </member>
        <member name="M:Caliburn.Testability.StubMessageBox.Show(System.String,System.String,System.Windows.MessageBoxButton,System.Windows.MessageBoxImage)">
            <summary>
            Displays a message box that has a message, title bar caption, button, and icon; and that returns a result..
            </summary>
            <param name="messageBoxText">The message box text.</param>
            <param name="caption">The caption.</param>
            <param name="button">The button.</param>
            <param name="icon">The icon.</param>
            <returns>
            A value that specifies which message box button is clicked by the user.
            </returns>
        </member>
        <member name="M:Caliburn.Testability.StubMessageBox.Show(System.String,System.String,System.Windows.MessageBoxButton,System.Windows.MessageBoxImage,System.Windows.MessageBoxResult)">
            <summary>
            Displays a message box that has a message, title bar caption, button, and icon;
            and that accepts a default message box result and returns a result.
            </summary>
            <param name="messageBoxText">The message box text.</param>
            <param name="caption">The caption.</param>
            <param name="button">The button.</param>
            <param name="icon">The icon.</param>
            <param name="defaultResult">The default result.</param>
            <returns>
            A value that specifies which message box button is clicked by the user.
            </returns>
        </member>
        <member name="M:Caliburn.Testability.StubMessageBox.Show(System.String,System.String,System.Windows.MessageBoxButton,System.Windows.MessageBoxImage,System.Windows.MessageBoxResult,System.Windows.MessageBoxOptions)">
            <summary>
            Displays a message box that has a message, title bar caption, button, and icon;
            and that accepts a default message box result, complies with the specified options, and returns a result.
            </summary>
            <param name="messageBoxText">The message box text.</param>
            <param name="caption">The caption.</param>
            <param name="button">The button.</param>
            <param name="icon">The icon.</param>
            <param name="defaultResult">The default result.</param>
            <param name="options">The options.</param>
            <returns>
            A value that specifies which message box button is clicked by the user.
            </returns>
        </member>
        <member name="P:Caliburn.Testability.StubMessageBox.Result">
            <summary>
            Gets or sets the result.
            </summary>
            <value>The result.</value>
        </member>
        <member name="T:Caliburn.Messaging.Parameter">
            <summary>
            Represents a parameter passed as part of a message.
            </summary>
        </member>
        <member name="F:Caliburn.Messaging.Parameter.ValueProperty">
            <summary>
            A dependency property representing the parameter's value.
            </summary>
        </member>
        <member name="M:Caliburn.Messaging.Parameter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.Messaging.Parameter"/> class.
            </summary>
        </member>
        <member name="M:Caliburn.Messaging.Parameter.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.Messaging.Parameter"/> class.
            </summary>
            <param name="value">The value of the parameter.</param>
        </member>
        <member name="P:Caliburn.Messaging.Parameter.Value">
            <summary>
            Gets or sets the value of the parameter.
            </summary>
            <value>The value.</value>
        </member>
        <member name="T:Caliburn.Element">
            <summary>
            Provides methods for dynamically creating WPF elements from XAML.
            </summary>
        </member>
        <member name="M:Caliburn.Element.FromFile``1(System.String)">
            <summary>
            Instantiates an element based on a XAML file located relative to the application's base directory.
            </summary>
            <typeparam name="T">The type of element being created.</typeparam>
            <param name="relativePath">The relative path of the file.</param>
            <returns>The created element.</returns>
        </member>
        <member name="M:Caliburn.Element.FromResource``1(System.String)">
            <summary>
            Instantiates an element based on XAML stored in the calling assembly's resources.
            </summary>
            <typeparam name="T">The type of element being created.</typeparam>
            <param name="resourceName">The name of the resource.</param>
            <returns>The created element.</returns>
        </member>
        <member name="M:Caliburn.Element.FromResource``1(System.Reflection.Assembly,System.String)">
            <summary>
            Instantiates an element based on XAML stored in an assembly's resources.
            </summary>
            <typeparam name="T">The type of element being created.</typeparam>
            <param name="assembly">The assembly.</param>
            <param name="resourceName">The name of the resource.</param>
            <returns>The created element.</returns>
        </member>
        <member name="M:Caliburn.Element.FromXaml``1(System.String)">
            <summary>
            Instantiates an element based on the provided XAML.
            </summary>
            <typeparam name="T">The type of element being created.</typeparam>
            <param name="xaml">The xaml.</param>
            <returns>The created element.</returns>
        </member>
        <member name="M:Caliburn.Element.FromXaml``1(System.IO.Stream)">
            <summary>
            Instantiates an element based on a XAML stream.
            </summary>
            <typeparam name="T">The type of element being created.</typeparam>
            <param name="xamlStream">The xaml stream.</param>
            <returns>The created element.</returns>
        </member>
        <member name="T:Caliburn.Controls.ViewBase`1">
            <summary>
            A base class for views with a strongly typed pesenter.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:Caliburn.Controls.ViewBase">
            <summary>
            A base class for views.
            </summary>
        </member>
        <member name="M:Caliburn.Controls.ViewBase.Execute(System.String,System.Object[])">
            <summary>
            Executes the specified action.
            </summary>
            <param name="actionName">Name of the action.</param>
            <param name="args">The args.</param>
        </member>
        <member name="P:Caliburn.Controls.ViewBase.Presenter">
            <summary>
            Gets the presenter.
            </summary>
            <value>The presenter.</value>
        </member>
        <member name="P:Caliburn.Controls.ViewBase`1.Presenter">
            <summary>
            Gets the presenter.
            </summary>
            <value>The presenter.</value>
        </member>
        <member name="T:Caliburn.Composition.Proxies.PanelProxy">
            <summary>
            A composite proxy capable of representing inheritors of <see cref="T:System.Windows.Controls.Panel"/>.
            </summary>
        </member>
        <member name="M:Caliburn.Composition.Proxies.PanelProxy.SetVisiblity(System.Windows.Visibility)">
            <summary>
            Sets the visiblity.
            </summary>
            <param name="visibility">The visibility.</param>
        </member>
        <member name="M:Caliburn.Composition.Proxies.PanelProxy.Add(System.Object)">
            <summary>
            Adds the specified element.
            </summary>
            <param name="element">The element.</param>
        </member>
        <member name="M:Caliburn.Composition.Proxies.PanelProxy.Insert(System.Int32,System.Object)">
            <summary>
            Inserts the specified index.
            </summary>
            <param name="index">The index.</param>
            <param name="element">The element.</param>
        </member>
        <member name="M:Caliburn.Composition.Proxies.PanelProxy.Remove(System.Object)">
            <summary>
            Removes the specified element.
            </summary>
            <param name="element">The element.</param>
        </member>
        <member name="M:Caliburn.Composition.Proxies.PanelProxy.Show(System.Object)">
            <summary>
            Shows the specified element.
            </summary>
            <param name="element">The element.</param>
        </member>
        <member name="P:Caliburn.Composition.Proxies.PanelProxy.Target">
            <summary>
            Gets or sets the actual target UI.
            </summary>
            <value>The target.</value>
        </member>
        <member name="P:Caliburn.Composition.Proxies.PanelProxy.ComponentCount">
            <summary>
            Gets the component count.
            </summary>
            <value>The component count.</value>
        </member>
        <member name="T:Caliburn.Testability.StubOpenFileDialog">
            <summary>
            A stub version of <see cref="T:Caliburn.Services.IOpenFileDialog"/>.
            </summary>
        </member>
        <member name="T:Caliburn.Services.IOpenFileDialog">
            <summary>
            Represents a common dialog box that allows a user to specify a filename for one or more files to open.
            </summary>
        </member>
        <member name="T:Caliburn.Services.IFileDialog">
            <summary>
            An interfaace that encapsulates functionality that is common to file dialogs.
            </summary>
        </member>
        <member name="T:Caliburn.Services.ICommonDialog">
            <summary>
            An interface for displaying common dialogs.
            </summary>
        </member>
        <member name="M:Caliburn.Services.ICommonDialog.ShowDialog">
            <summary>
            Displays a common dialog.
            </summary>
            <returns>If the user clicks the OK button of the dialog that is displayed, true is returned; otherwise, false.</returns>
        </member>
        <member name="M:Caliburn.Services.ICommonDialog.Reset">
            <summary>
            Resets the properties of a common dialog to their default values.
            </summary>
        </member>
        <member name="P:Caliburn.Services.ICommonDialog.Tag">
            <summary>
            Gets or sets an object associated with the dialog. 
            This provides the ability to attach an arbitrary object to the dialog.
            </summary>
            <value>The tag.</value>
        </member>
        <member name="P:Caliburn.Services.IFileDialog.CheckPathExists">
            <summary>
            Gets or sets a value that specifies whether warnings are displayed if the user types invalid paths and filenames.
            </summary>
            <value><c>true</c> if warnings are displayed; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Caliburn.Services.IFileDialog.CheckFileExists">
            <summary>
            Gets or sets a value indicating whether a file dialog displays a warning if the user specifies a filename that does not exist.
            </summary>
            <value><c>true</c> if warnings are displayed; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Caliburn.Services.IFileDialog.AddExtension">
            <summary>
            Gets or sets a value indicating whether a file dialog automatically adds an extension to a filename if the user omits an extension.
            </summary>
            <value><c>true</c> if extensions are added; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Caliburn.Services.IFileDialog.DefaultExt">
            <summary>
            Gets or sets a value that specifies the default extension string to use to filter the list of files that are displayed.
            </summary>
            <value>The default extension string.</value>
        </member>
        <member name="P:Caliburn.Services.IFileDialog.DereferenceLinks">
            <summary>
            Gets or sets a value indicating whether a file dialog returns either the location of the file referenced by a shortcut or the location of the shortcut file (.lnk).
            </summary>
            <value><c>true</c> to return the location referenced; <c>false</c> to return the shortcut location.</value>
        </member>
        <member name="P:Caliburn.Services.IFileDialog.FileNames">
            <summary>
            Gets an array that contains one filename for each selected file.
            </summary>
            <value>An array that contains one filename for each selected file. The default is an array with a single item whose value is System.String.Empty.</value>
        </member>
        <member name="P:Caliburn.Services.IFileDialog.FileName">
            <summary>
            Gets or sets a string containing the full path of the file selected in a file dialog.
            </summary>
            <value>The full path of the file selected in the file dialog.</value>
        </member>
        <member name="P:Caliburn.Services.IFileDialog.ValidateNames">
            <summary>
            Gets or sets a value indicating whether the dialog accepts only valid filenames.
            </summary>
            <value><c>true</c> f warnings will be shown when an invalid filename is provided; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Caliburn.Services.IFileDialog.Title">
            <summary>
            Gets or sets the text that appears in the title bar of a file dialog.
            </summary>
            <value>The text that appears in the title bar of a file dialog. The default is System.String.Empty.</value>
        </member>
        <member name="P:Caliburn.Services.IFileDialog.SafeFileNames">
            <summary>
            Gets an array that contains one safe file name for each selected file.
            </summary>
            <value>An array that contains one safe file name for each selected file. The default is an array with a single item whose value is System.String.Empty.</value>
        </member>
        <member name="P:Caliburn.Services.IFileDialog.SafeFileName">
            <summary>
            Gets a string that only contains the filename for the selected file.
            </summary>
            <value>The filename for the selected file. The default is System.String.Empty, which is also the value when either no file is selected or a directory is selected.</value>
        </member>
        <member name="P:Caliburn.Services.IFileDialog.RestoreDirectory">
            <summary>
            Gets or sets a value that causes a file dialog to restore its current directory to the original value before a user changes directory to search for files.
            </summary>
            <value><c>true</c> if directory should be restored after a search; <c>false</c> to use whatever directory string remained from search.</value>
        </member>
        <member name="P:Caliburn.Services.IFileDialog.InitialDirectory">
            <summary>
            Gets or sets the initial directory that is displayed by a file dialog.
            </summary>
            <value>The initial directory.</value>
        </member>
        <member name="P:Caliburn.Services.IFileDialog.FilterIndex">
            <summary>
            Gets or sets the index of the filter currently selected in a file dialog.
            </summary>
            <value>The index of the filter.</value>
        </member>
        <member name="P:Caliburn.Services.IFileDialog.Filter">
            <summary>
            Gets or sets the filter string that determines what types of files are displayed.
            </summary>
            <value>The filter.</value>
        </member>
        <member name="E:Caliburn.Services.IFileDialog.FileOk">
            <summary>
            Occurs when the user selects a filename by either clicking the Open button or the Save button.
            </summary>
        </member>
        <member name="M:Caliburn.Services.IOpenFileDialog.OpenFile">
            <summary>
            Opens a read-only stream for the file that is selected by the user.
            </summary>
            <returns>A new System.IO.Stream that contains the selected file.</returns>
        </member>
        <member name="M:Caliburn.Services.IOpenFileDialog.OpenFiles">
            <summary>
            Creates an array that contains one read-only stream for each file selected by the user.
            </summary>
            <returns>An array of multiple new System.IO.Stream objects that contain the selected files.</returns>
        </member>
        <member name="P:Caliburn.Services.IOpenFileDialog.Multiselect">
            <summary>
            Gets or sets an option indicating whether the dialog allows users to select multiple files.
            </summary>
            <value><c>true</c> if multiple selections are allowed; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Caliburn.Services.IOpenFileDialog.ReadOnlyChecked">
            <summary>
            Gets or sets a value indicating whether the read-only check box displayed is selected.
            </summary>
            <value><c>true</c> if the checkbox is selected; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Caliburn.Services.IOpenFileDialog.ShowReadOnly">
            <summary>
            Gets or sets a value indicating whether the dialog contains a read-only check box.
            </summary>
            <value><c>true</c> if the checkbox is displayed; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Caliburn.Testability.StubOpenFileDialog.OpenFile">
            <summary>
            Opens a read-only stream for the file that is selected by the user.
            </summary>
            <returns>
            A new System.IO.Stream that contains the selected file.
            </returns>
        </member>
        <member name="M:Caliburn.Testability.StubOpenFileDialog.OpenFiles">
            <summary>
            Creates an array that contains one read-only stream for each file selected by the user.
            </summary>
            <returns>
            An array of multiple new System.IO.Stream objects that contain the selected files.
            </returns>
        </member>
        <member name="M:Caliburn.Testability.StubOpenFileDialog.ShowDialog">
            <summary>
            Displays a common dialog.
            </summary>
            <returns>
            If the user clicks the OK button of the dialog that is displayed, true is returned; otherwise, false.
            </returns>
        </member>
        <member name="M:Caliburn.Testability.StubOpenFileDialog.Reset">
            <summary>
            Resets the properties of a common dialog to their default values.
            </summary>
        </member>
        <member name="P:Caliburn.Testability.StubOpenFileDialog.DialogResult">
            <summary>
            Gets or sets the dialog result.
            </summary>
            <value>The dialog result.</value>
        </member>
        <member name="P:Caliburn.Testability.StubOpenFileDialog.Multiselect">
            <summary>
            Gets or sets an option indicating whether the dialog allows users to select multiple files.
            </summary>
            <value>
            	<c>true</c> if multiple selections are allowed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Caliburn.Testability.StubOpenFileDialog.ReadOnlyChecked">
            <summary>
            Gets or sets a value indicating whether the read-only check box displayed is selected.
            </summary>
            <value>
            	<c>true</c> if the checkbox is selected; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Caliburn.Testability.StubOpenFileDialog.ShowReadOnly">
            <summary>
            Gets or sets a value indicating whether the dialog contains a read-only check box.
            </summary>
            <value>
            	<c>true</c> if the checkbox is displayed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Caliburn.Testability.StubOpenFileDialog.CheckPathExists">
            <summary>
            Gets or sets a value that specifies whether warnings are displayed if the user types invalid paths and filenames.
            </summary>
            <value><c>true</c> if warnings are displayed; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Caliburn.Testability.StubOpenFileDialog.CheckFileExists">
            <summary>
            Gets or sets a value indicating whether a file dialog displays a warning if the user specifies a filename that does not exist.
            </summary>
            <value><c>true</c> if warnings are displayed; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Caliburn.Testability.StubOpenFileDialog.AddExtension">
            <summary>
            Gets or sets a value indicating whether a file dialog automatically adds an extension to a filename if the user omits an extension.
            </summary>
            <value><c>true</c> if extensions are added; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Caliburn.Testability.StubOpenFileDialog.DefaultExt">
            <summary>
            Gets or sets a value that specifies the default extension string to use to filter the list of files that are displayed.
            </summary>
            <value>The default extension string.</value>
        </member>
        <member name="P:Caliburn.Testability.StubOpenFileDialog.DereferenceLinks">
            <summary>
            Gets or sets a value indicating whether a file dialog returns either the location of the file referenced by a shortcut or the location of the shortcut file (.lnk).
            </summary>
            <value>
            	<c>true</c> to return the location referenced; <c>false</c> to return the shortcut location.
            </value>
        </member>
        <member name="P:Caliburn.Testability.StubOpenFileDialog.FileNames">
            <summary>
            Gets an array that contains one filename for each selected file.
            </summary>
            <value>
            An array that contains one filename for each selected file. The default is an array with a single item whose value is System.String.Empty.
            </value>
        </member>
        <member name="P:Caliburn.Testability.StubOpenFileDialog.FileName">
            <summary>
            Gets or sets a string containing the full path of the file selected in a file dialog.
            </summary>
            <value>The full path of the file selected in the file dialog.</value>
        </member>
        <member name="P:Caliburn.Testability.StubOpenFileDialog.ValidateNames">
            <summary>
            Gets or sets a value indicating whether the dialog accepts only valid filenames.
            </summary>
            <value>
            	<c>true</c> f warnings will be shown when an invalid filename is provided; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Caliburn.Testability.StubOpenFileDialog.Title">
            <summary>
            Gets or sets the text that appears in the title bar of a file dialog.
            </summary>
            <value>
            The text that appears in the title bar of a file dialog. The default is System.String.Empty.
            </value>
        </member>
        <member name="P:Caliburn.Testability.StubOpenFileDialog.SafeFileNames">
            <summary>
            Gets an array that contains one safe file name for each selected file.
            </summary>
            <value>
            An array that contains one safe file name for each selected file. The default is an array with a single item whose value is System.String.Empty.
            </value>
        </member>
        <member name="P:Caliburn.Testability.StubOpenFileDialog.SafeFileName">
            <summary>
            Gets a string that only contains the filename for the selected file.
            </summary>
            <value>
            The filename for the selected file. The default is System.String.Empty, which is also the value when either no file is selected or a directory is selected.
            </value>
        </member>
        <member name="P:Caliburn.Testability.StubOpenFileDialog.RestoreDirectory">
            <summary>
            Gets or sets a value that causes a file dialog to restore its current directory to the original value before a user changes directory to search for files.
            </summary>
            <value>
            	<c>true</c> if directory should be restored after a search; <c>false</c> to use whatever directory string remained from search.
            </value>
        </member>
        <member name="P:Caliburn.Testability.StubOpenFileDialog.InitialDirectory">
            <summary>
            Gets or sets the initial directory that is displayed by a file dialog.
            </summary>
            <value>The initial directory.</value>
        </member>
        <member name="P:Caliburn.Testability.StubOpenFileDialog.FilterIndex">
            <summary>
            Gets or sets the index of the filter currently selected in a file dialog.
            </summary>
            <value>The index of the filter.</value>
        </member>
        <member name="P:Caliburn.Testability.StubOpenFileDialog.Filter">
            <summary>
            Gets or sets the filter string that determines what types of files are displayed.
            </summary>
            <value>The filter.</value>
        </member>
        <member name="E:Caliburn.Testability.StubOpenFileDialog.FileOk">
            <summary>
            Occurs when the user selects a filename by either clicking the Open button or the Save button.
            </summary>
        </member>
        <member name="P:Caliburn.Testability.StubOpenFileDialog.Tag">
            <summary>
            Gets or sets an object associated with the dialog.
            This provides the ability to attach an arbitrary object to the dialog.
            </summary>
            <value>The tag.</value>
        </member>
        <member name="T:Caliburn.Services.IContainer">
            <summary>
            An abstraction of the underlying dependency injection container.
            </summary>
        </member>
        <member name="M:Caliburn.Services.IContainer.Resolve(System.Type)">
            <summary>
            Resolves the specified type.
            </summary>
            <param name="type">The type.</param>
            <returns>A configured instance of the resolved type.</returns>
        </member>
        <member name="M:Caliburn.Services.IContainer.Resolve(System.String)">
            <summary>
            Resolves the specified key.
            </summary>
            <param name="key">The key.</param>
            <returns>A configured instance of the resolved key.</returns>
        </member>
        <member name="M:Caliburn.Services.IContainer.Resolve(System.Type,System.String)">
            <summary>
            Resolves the specified service type by key.
            </summary>
            <param name="serviceType">Type of the service.</param>
            <param name="key">The key.</param>
            <returns>A configured instance of the resolved type.</returns>
        </member>
        <member name="M:Caliburn.Services.IContainer.LoadFrom(System.Reflection.Assembly)">
            <summary>
            Allows the container an opportunity to register types in an assembly.
            </summary>
            <param name="assembly">The assembly.</param>
        </member>
        <member name="M:Caliburn.Services.IContainer.CreateChildContainer">
            <summary>
            Creates a child container.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Caliburn.Metadata.ActionInfo">
            <summary>
            Represents metadata for a specific presenter action.
            </summary>
        </member>
        <member name="T:Caliburn.Metadata.Rescuable">
            <summary>
            Enables rescue behavior.
            </summary>
        </member>
        <member name="T:Caliburn.Metadata.MetadataContainer">
            <summary>
            An implementation of <see cref="T:Caliburn.Metadata.IMetadataContainer"/>.
            </summary>
        </member>
        <member name="T:Caliburn.Metadata.IMetadataContainer">
            <summary>
            Stores metadata.
            </summary>
        </member>
        <member name="M:Caliburn.Metadata.IMetadataContainer.AddMetadata(Caliburn.Metadata.MetadataProvider)">
            <summary>
            Adds metadata to the store.
            </summary>
            <param name="metadata">The metadata.</param>
        </member>
        <member name="M:Caliburn.Metadata.IMetadataContainer.GetMetadata``1">
            <summary>
            Retrieves metadata from the store.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Caliburn.Metadata.MetadataContainer.AddMetadata(Caliburn.Metadata.MetadataProvider)">
            <summary>
            Adds metadata to the store.
            </summary>
            <param name="metadata">The metadata.</param>
        </member>
        <member name="M:Caliburn.Metadata.MetadataContainer.GetMetadata``1">
            <summary>
            Retrieves metadata from the store.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Caliburn.Metadata.Rescuable.TryPerformRescue(System.Object,System.Exception)">
            <summary>
            Tries the perform the rescue.
            </summary>
            <param name="presenterInstance">The presenter instance.</param>
            <param name="exception">The exception.</param>
            <returns></returns>
        </member>
        <member name="M:Caliburn.Metadata.Rescuable.InitializeRescue(System.Type,System.String)">
            <summary>
            Initializes the rescue.
            </summary>
            <param name="instanceType">Type of the instance.</param>
            <param name="methodName">Name of the instance method.</param>
        </member>
        <member name="P:Caliburn.Metadata.Rescuable.CanRescue">
            <summary>
            Gets a value indicating whether this instance can rescue.
            </summary>
            <value>
            	<c>true</c> if this instance can rescue; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Caliburn.Metadata.ActionInfo.Execute(System.Object,Caliburn.Messaging.ActionMessage,System.Windows.DependencyObject)">
            <summary>
            Executes the action on the specified target.
            </summary>
            <param name="target">The target.</param>
            <param name="message">The message.</param>
            <param name="messageSource">The message source.</param>
        </member>
        <member name="M:Caliburn.Metadata.ActionInfo.Create(Caliburn.Metadata.PresenterInfo,System.Reflection.MethodInfo)">
            <summary>
            Creates action metadata based on the specified <see cref="!:methodInfo"/>.
            </summary>
            <param name="owner">The owner.</param>
            <param name="methodInfo">The method info.</param>
            <returns></returns>
        </member>
        <member name="P:Caliburn.Metadata.ActionInfo.Name">
            <summary>
            Gets the name of the method.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:Caliburn.Metadata.ActionInfo.MethodInfo">
            <summary>
            Gets the reflected method info.
            </summary>
            <value>The method info.</value>
        </member>
        <member name="P:Caliburn.Metadata.ActionInfo.Owner">
            <summary>
            Gets the owning presenter.
            </summary>
            <value>The owner.</value>
        </member>
        <member name="P:Caliburn.Metadata.ActionInfo.Parameters">
            <summary>
            Gets the parameter metadata for the method.
            </summary>
            <value>The parameters.</value>
        </member>
        <member name="P:Caliburn.Metadata.ActionInfo.Executor">
            <summary>
            Gets an executor for the method.
            </summary>
            <value>The executor.</value>
        </member>
        <member name="T:Caliburn.Execution.IUnboundMethod">
            <summary>
            Used to generically interact with a method that is not bound to an instance of a class.
            </summary>
        </member>
        <member name="M:Caliburn.Execution.IUnboundMethod.Execute(System.Object,System.Object[])">
            <summary>
            Executes the method on the specified instance with the specified parameters.
            </summary>
            <param name="instance">The instance.</param>
            <param name="parameters">The parameters.</param>
            <returns></returns>
        </member>
        <member name="M:Caliburn.Execution.IUnboundMethod.AsyncExecute(System.Object,System.AsyncCallback,System.Object,System.Object[])">
            <summary>
            Asynchronously executes the method on the specified instance with the specified parameters.
            </summary>
            <param name="instance">The instance.</param>
            <param name="callback">The callback.</param>
            <param name="state">The state.</param>
            <param name="parameters">The parameters.</param>
        </member>
        <member name="P:Caliburn.Execution.IUnboundMethod.MethodInfo">
            <summary>
            Gets the method info.
            </summary>
            <value>The method info.</value>
        </member>
        <member name="T:Caliburn.Modules.LazyModuleController">
            <summary>
            An implementation of <see cref="T:Caliburn.Modules.IModuleController"/> that enables lazy loading of modules.
            </summary>
        </member>
        <member name="T:Caliburn.Modules.IModuleController">
            <summary>
            A proxy around an actual module that adds additional information and control.
            </summary>
        </member>
        <member name="P:Caliburn.Modules.IModuleController.IsModuleLoaded">
            <summary>
            Gets a value indicating whether the module is loaded.
            </summary>
            <value><c>true</c> if  loaded; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Caliburn.Modules.IModuleController.Description">
            <summary>
            Gets the description of the module.
            </summary>
            <value>The description.</value>
        </member>
        <member name="M:Caliburn.Modules.LazyModuleController.#ctor(Caliburn.Modules.IModuleDescription)">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.Modules.LazyModuleController"/> class.
            </summary>
            <param name="description">The description.</param>
        </member>
        <member name="M:Caliburn.Modules.LazyModuleController.Initialize">
            <summary>
            Initializes this module.
            </summary>
        </member>
        <member name="M:Caliburn.Modules.LazyModuleController.LoadModule">
            <summary>
            Loads the module.
            </summary>
        </member>
        <member name="M:Caliburn.Modules.LazyModuleController.CreatePresenter(System.String)">
            <summary>
            Creates the presenter from the lazy module.
            </summary>
            <param name="actualPresenterTypeName">Actual name of the presenter type.</param>
            <returns></returns>
        </member>
        <member name="M:Caliburn.Modules.LazyModuleController.ExecuteCommand(System.String,System.Object)">
            <summary>
            Executes the command on the lazy module.
            </summary>
            <param name="command">The command.</param>
            <param name="parameter">The parameter.</param>
        </member>
        <member name="M:Caliburn.Modules.LazyModuleController.Shutdown">
            <summary>
            Shuts down this module.
            </summary>
        </member>
        <member name="P:Caliburn.Modules.LazyModuleController.IsModuleLoaded">
            <summary>
            Gets a value indicating whether the module is loaded.
            </summary>
            <value><c>true</c> if  loaded; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Caliburn.Modules.LazyModuleController.Description">
            <summary>
            Gets the description of the module.
            </summary>
            <value>The description.</value>
        </member>
        <member name="E:Caliburn.Modules.LazyModuleController.PropertyChanged">
            <summary>
            Occurs when a property value changes.
            </summary>
        </member>
        <member name="T:Caliburn.Modules.FolderBasedModuleLocator">
            <summary>
            An implementation of <see cref="T:Caliburn.Services.IModuleLocator"/> that searches for modules in a specific folder.
            </summary>
        </member>
        <member name="M:Caliburn.Modules.FolderBasedModuleLocator.#ctor(Caliburn.Modules.IModuleRepository,Caliburn.Modules.IModuleControllerFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.Modules.FolderBasedModuleLocator"/> class.
            </summary>
            <param name="repository">The repository.</param>
            <param name="controllerFactory">The controller factory.</param>
        </member>
        <member name="M:Caliburn.Modules.FolderBasedModuleLocator.#ctor(Caliburn.Modules.IModuleRepository,Caliburn.Modules.IModuleControllerFactory,System.String,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.Modules.FolderBasedModuleLocator"/> class.
            </summary>
            <param name="repository">The repository.</param>
            <param name="controllerFactory">The controller factory.</param>
            <param name="path">The path.</param>
            <param name="loadAsync"></param>
            <param name="watchFolderForChanges">if set to <c>true</c> watch folder for changes.</param>
        </member>
        <member name="M:Caliburn.Modules.FolderBasedModuleLocator.Search">
            <summary>
            Searches for modules.
            </summary>
        </member>
        <member name="T:Caliburn.Controls.Transitions.TransitionDirection">
            <summary>
            The direction a transition should progress in.
            </summary>
        </member>
        <member name="F:Caliburn.Controls.Transitions.TransitionDirection.Forward">
            <summary>
            Forward
            </summary>
        </member>
        <member name="F:Caliburn.Controls.Transitions.TransitionDirection.Backward">
            <summary>
            Backward
            </summary>
        </member>
        <member name="T:Caliburn.Controls.PresenterHost">
            <summary>
            Binds a presenter to a the UI.  Supports metadata view selection and transitions bewteen 
            different views of the same presenter.
            </summary>
        </member>
        <member name="T:Caliburn.Controls.TransitionPresenter">
            <summary>
            Enables animated transitions whenever the Content property changes.
            </summary>
        </member>
        <member name="F:Caliburn.Controls.TransitionPresenter.ContentProperty">
            <summary>
            A dependency property representing the element's content.
            </summary>
        </member>
        <member name="F:Caliburn.Controls.TransitionPresenter.ContentTemplateProperty">
            <summary>
            A dependency property representing the element's content template.
            </summary>
        </member>
        <member name="F:Caliburn.Controls.TransitionPresenter.ContentTemplateSelectorProperty">
            <summary>
            A dependency property representing the element's content template selector.
            </summary>
        </member>
        <member name="F:Caliburn.Controls.TransitionPresenter.IsTransitioningPropertyKey">
            <summary>
            A dependency property key representing the transitioning property.
            </summary>
        </member>
        <member name="F:Caliburn.Controls.TransitionPresenter.IsTransitioningProperty">
            <summary>
            A dependency property indicating whether the element is currently transitioning.
            </summary>
        </member>
        <member name="F:Caliburn.Controls.TransitionPresenter.TransitionProperty">
            <summary>
            A dependency property representing the element's transition.
            </summary>
        </member>
        <member name="F:Caliburn.Controls.TransitionPresenter.TransitionSelectorProperty">
            <summary>
            A dependency property representing the element's transition selector.
            </summary>
        </member>
        <member name="M:Caliburn.Controls.TransitionPresenter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.Controls.TransitionPresenter"/> class.
            </summary>
        </member>
        <member name="P:Caliburn.Controls.TransitionPresenter.Content">
            <summary>
            Gets or sets the content.
            </summary>
            <value>The content.</value>
        </member>
        <member name="P:Caliburn.Controls.TransitionPresenter.ContentTemplate">
            <summary>
            Gets or sets the content template.
            </summary>
            <value>The content template.</value>
        </member>
        <member name="P:Caliburn.Controls.TransitionPresenter.ContentTemplateSelector">
            <summary>
            Gets or sets the content template selector.
            </summary>
            <value>The content template selector.</value>
        </member>
        <member name="P:Caliburn.Controls.TransitionPresenter.IsTransitioning">
            <summary>
            Gets or a value indicating whether this instance is transitioning.
            </summary>
            <value>
            	<c>true</c> if this instance is transitioning; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Caliburn.Controls.TransitionPresenter.Transition">
            <summary>
            Gets or sets the transition.
            </summary>
            <value>The transition.</value>
        </member>
        <member name="P:Caliburn.Controls.TransitionPresenter.TransitionSelector">
            <summary>
            Gets or sets the transition selector.
            </summary>
            <value>The transition selector.</value>
        </member>
        <member name="F:Caliburn.Controls.PresenterHost.PresenterProperty">
            <summary>
            A dependency property representing the presenter.
            </summary>
        </member>
        <member name="P:Caliburn.Controls.PresenterHost.Presenter">
            <summary>
            Gets or sets the presenter.
            </summary>
            <value>The presenter.</value>
        </member>
        <member name="T:Caliburn.StateManagement.Persisters.ElementPersister">
            <summary>
            An implementation of <see cref="T:Caliburn.StateManagement.IPersister"/> that can save DependencyProperty values.
            </summary>
        </member>
        <member name="T:Caliburn.StateManagement.IPersister">
            <summary>
            Implemented by types that wish to be persisted by the state mechanism.
            </summary>
        </member>
        <member name="M:Caliburn.StateManagement.IPersister.Restore(System.Object)">
            <summary>
            Restores the specified target based on internal state..
            </summary>
            <param name="target">The target.</param>
        </member>
        <member name="M:Caliburn.StateManagement.IPersister.Write(Caliburn.StateManagement.StateWriter)">
            <summary>
            Writes the instance's state.
            </summary>
            <param name="writer">The writer.</param>
        </member>
        <member name="M:Caliburn.StateManagement.IPersister.Read(Caliburn.StateManagement.ContainerEntry)">
            <summary>
            Reads the state in.
            </summary>
            <param name="state">The state.</param>
        </member>
        <member name="M:Caliburn.StateManagement.Persisters.ElementPersister.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.StateManagement.Persisters.ElementPersister"/> class.
            </summary>
        </member>
        <member name="M:Caliburn.StateManagement.Persisters.ElementPersister.#ctor(System.Windows.DependencyProperty[])">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.StateManagement.Persisters.ElementPersister"/> class.
            </summary>
            <param name="properties">The properties to persist.</param>
        </member>
        <member name="M:Caliburn.StateManagement.Persisters.ElementPersister.Restore(System.Object)">
            <summary>
            Restores the specified target based on internal state..
            </summary>
            <param name="target">The target.</param>
        </member>
        <member name="M:Caliburn.StateManagement.Persisters.ElementPersister.Write(Caliburn.StateManagement.StateWriter)">
            <summary>
            Writes the instance's state.
            </summary>
            <param name="writer">The writer.</param>
        </member>
        <member name="M:Caliburn.StateManagement.Persisters.ElementPersister.Read(Caliburn.StateManagement.ContainerEntry)">
            <summary>
            Reads the state in.
            </summary>
            <param name="state">The state.</param>
        </member>
        <member name="T:Caliburn.Metadata.PresenterAttribute">
            <summary>
            Provides presenter-centric metadata.
            </summary>
        </member>
        <member name="P:Caliburn.Metadata.PresenterAttribute.Rescue">
            <summary>
            Gets or sets the name of the rescue for the attributed presenter.
            </summary>
            <value>The rescue.</value>
        </member>
        <member name="T:Caliburn.PlatformCapabilities.WindowsCapabilities">
            <summary>
            A standard implementation of <see cref="T:Caliburn.Services.IPlatformCapabilities"/> for windows.
            </summary>
        </member>
        <member name="M:Caliburn.PlatformCapabilities.WindowsCapabilities.CreateOpenFileDialog">
            <summary>
            Creates an open file dialog.
            </summary>
            <returns>An open file dialog.</returns>
        </member>
        <member name="M:Caliburn.PlatformCapabilities.WindowsCapabilities.CreateSaveFileDialog">
            <summary>
            Creates a save file dialog.
            </summary>
            <returns>A save file dialog.</returns>
        </member>
        <member name="P:Caliburn.PlatformCapabilities.WindowsCapabilities.MessageBox">
            <summary>
            Gets the message box service.
            </summary>
            <value>The message box.</value>
        </member>
        <member name="T:Caliburn.Modules.LazyCommand">
            <summary>
            A command that executes on a lazy-loaded module.
            </summary>
        </member>
        <member name="M:Caliburn.Modules.LazyCommand.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.Modules.LazyCommand"/> class.
            </summary>
            <param name="command">The command.</param>
        </member>
        <member name="M:Caliburn.Modules.LazyCommand.Execute(System.Object)">
            <summary>
            Defines the method to be called when the command is invoked.
            </summary>
            <param name="parameter">Data used by the command.  If the command does not require data to be passed, this object can be set to null.</param>
        </member>
        <member name="M:Caliburn.Modules.LazyCommand.CanExecute(System.Object)">
            <summary>
            Defines the method that determines whether the command can execute in its current state.
            </summary>
            <param name="parameter">Data used by the command.  If the command does not require data to be passed, this object can be set to null.</param>
            <returns>
            true if this command can be executed; otherwise, false.
            </returns>
        </member>
        <member name="P:Caliburn.Modules.LazyCommand.Controller">
            <summary>
            Gets or sets the lazy module's controller.
            </summary>
            <value>The controller.</value>
        </member>
        <member name="E:Caliburn.Modules.LazyCommand.CanExecuteChanged">
            <summary>
            Occurs when changes occur that affect whether or not the command should execute.
            </summary>
        </member>
        <member name="T:Caliburn.Events.Aggregation.Subscription">
            <summary>
            Represents a weakly referenced subscription to a set of strongly typed messages.
            </summary>
        </member>
        <member name="M:Caliburn.Events.Aggregation.Subscription.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.Events.Aggregation.Subscription"/> class.
            </summary>
            <param name="listener">The listener.</param>
        </member>
        <member name="M:Caliburn.Events.Aggregation.Subscription.Handles``1">
            <summary>
            Indicates whether the subscription pertains to the specified message type.
            </summary>
            <typeparam name="T">The message type.</typeparam>
            <returns><c>true</c> if the subscription can handles the message, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Caliburn.Events.Aggregation.Subscription.TryToDeliver``1(``0,System.Boolean)">
            <summary>
            Tries to deliver the specifies message.
            </summary>
            <typeparam name="T">The message type.</typeparam>
            <param name="message">The message.</param>
            <param name="deliveryIsAsync">if set to <c>true</c> the message is currently being delivered asynchronously.</param>
            <returns><c>false</c> if the reference has expired, <c>true</c> otherwise.</returns>
        </member>
        <member name="M:Caliburn.Events.Aggregation.Subscription.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>.</param>
            <returns>
            true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
            <exception cref="T:System.NullReferenceException">The <paramref name="obj"/> parameter is null.</exception>
        </member>
        <member name="T:Caliburn.Events.Aggregation.IAsyncListener`1">
            <summary>
            Identifies a class as an asynchronous handler for a given message type.
            </summary>
            <typeparam name="T">The message type.</typeparam>
        </member>
        <member name="T:Caliburn.Events.Aggregation.IListener`1">
            <summary>
            Identifies a class as a handler for a given message type.
            </summary>
            <typeparam name="T">The message type.</typeparam>
        </member>
        <member name="M:Caliburn.Events.Aggregation.IListener`1.Handle(`0)">
            <summary>
            Handles the specified message.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="T:Caliburn.Controls.Transitions.TransitionBase">
            <summary>
            A base class for transitions.
            </summary>
        </member>
        <member name="F:Caliburn.Controls.Transitions.TransitionBase.ClipToBoundsProperty">
            <summary>
            A dependency property representing ClipToBounds.
            </summary>
        </member>
        <member name="F:Caliburn.Controls.Transitions.TransitionBase.IsNewContentTopmostProperty">
            <summary>
            A dependency property representing IsNewContentTopmost.
            </summary>
        </member>
        <member name="M:Caliburn.Controls.Transitions.TransitionBase.BeginTransition(Caliburn.Controls.TransitionPresenter,System.Windows.Controls.ContentPresenter,System.Windows.Controls.ContentPresenter)">
            <summary>
            Called when an element is Removed from the TransitionPresenter's visual tree
            </summary>
            <param name="transitionElement">The transition element.</param>
            <param name="oldContent">The old content.</param>
            <param name="newContent">The new content.</param>
        </member>
        <member name="M:Caliburn.Controls.Transitions.TransitionBase.EndTransition(Caliburn.Controls.TransitionPresenter,System.Windows.Controls.ContentPresenter,System.Windows.Controls.ContentPresenter)">
            <summary>
            Transitions should call this method when they are done 
            </summary>
            <param name="transitionElement">The transition element.</param>
            <param name="oldContent">The old content.</param>
            <param name="newContent">The new content.</param>
        </member>
        <member name="M:Caliburn.Controls.Transitions.TransitionBase.OnTransitionEnded(Caliburn.Controls.TransitionPresenter,System.Windows.Controls.ContentPresenter,System.Windows.Controls.ContentPresenter)">
            <summary>
            Transitions can override this to perform cleanup at the end of the transition
            </summary>
            <param name="transitionElement">The transition element.</param>
            <param name="oldContent">The old content.</param>
            <param name="newContent">The new content.</param>
        </member>
        <member name="M:Caliburn.Controls.Transitions.TransitionBase.CreateBrush(Caliburn.Controls.TransitionPresenter,System.Windows.Controls.ContentPresenter)">
            <summary>
            Returns a clone of the element and hides it in the main tree
            </summary>
            <param name="transitionElement">The transition element.</param>
            <param name="content">The content.</param>
            <returns></returns>
        </member>
        <member name="P:Caliburn.Controls.Transitions.TransitionBase.ClipToBounds">
            <summary>
            Gets or sets a value indicating whether to clip to bounds.
            </summary>
            <value><c>true</c> to [clip to bounds; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Caliburn.Controls.Transitions.TransitionBase.IsNewContentTopmost">
            <summary>
            Gets or sets a value indicating whether the new contant is topmost.
            </summary>
            <value>
            	<c>true</c> if new content is topmost; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Caliburn.Composition.ScopeType">
            <summary>
            The method used for creating the scope.
            </summary>
        </member>
        <member name="F:Caliburn.Composition.ScopeType.View">
            <summary>
            The scope is created based on the view.
            </summary>
        </member>
        <member name="F:Caliburn.Composition.ScopeType.Presenter">
            <summary>
            The scope is created based on the presenter.
            </summary>
        </member>
        <member name="T:Caliburn.Actions.ActionExecutor">
            <summary>
            Implements base functionality for action execution.
            </summary>
        </member>
        <member name="M:Caliburn.Actions.ActionExecutor.#ctor(Caliburn.Metadata.ActionInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.Actions.ActionExecutor"/> class.
            </summary>
            <param name="actionInfo">The action info.</param>
        </member>
        <member name="M:Caliburn.Actions.ActionExecutor.Execute(System.Windows.DependencyObject,Caliburn.Messaging.ActionMessage,System.Object)">
            <summary>
            Executes the specified action message on the target from the source.
            </summary>
            <param name="messageSource">The message source.</param>
            <param name="message">The message.</param>
            <param name="target">The target.</param>
        </member>
        <member name="T:Caliburn.Services.PresenterBinding">
            <summary>
            Represents the connection between a view and a presenter.
            </summary>
        </member>
        <member name="F:Caliburn.Services.PresenterBinding.NotFound">
            <summary>
            A non-existent binding.
            </summary>
        </member>
        <member name="M:Caliburn.Services.PresenterBinding.#ctor(System.Windows.DependencyObject,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.Services.PresenterBinding"/> class.
            </summary>
            <param name="target">The target view.</param>
            <param name="presenter">The presenter that will handle the view.</param>
        </member>
        <member name="P:Caliburn.Services.PresenterBinding.Target">
            <summary>
            Gets the target.
            </summary>
            <value>The target view.</value>
        </member>
        <member name="P:Caliburn.Services.PresenterBinding.Presenter">
            <summary>
            Gets the presenter.
            </summary>
            <value>The presenter.</value>
        </member>
        <member name="T:Caliburn.MarkupExtensions.GestureExtension">
            <summary>
            A Markup Extension easing the creation of gestures in XAML.
            </summary>
        </member>
        <member name="M:Caliburn.MarkupExtensions.GestureExtension.ProvideValue(System.IServiceProvider)">
            <summary>
            When implemented in a derived class, returns an object that is set as the value of the target property for this markup extension.
            </summary>
            <param name="serviceProvider">Object that can provide services for the markup extension.</param>
            <returns>
            The object value to set on the property where the extension is applied.
            </returns>
        </member>
        <member name="P:Caliburn.MarkupExtensions.GestureExtension.Key">
            <summary>
            Gets or sets the key.
            </summary>
            <value>The key.</value>
        </member>
        <member name="P:Caliburn.MarkupExtensions.GestureExtension.Modifiers">
            <summary>
            Gets or sets the modifiers.
            </summary>
            <value>The modifiers.</value>
        </member>
        <member name="P:Caliburn.MarkupExtensions.GestureExtension.MouseAction">
            <summary>
            Gets or sets the mouse action.
            </summary>
            <value>The mouse action.</value>
        </member>
        <member name="T:Caliburn.Execution.UnboundAction`1">
            <summary>
            Represents an unbound action.
            </summary>
            <typeparam name="TTarget">The type of the target.</typeparam>
        </member>
        <member name="M:Caliburn.Execution.UnboundAction`1.#ctor(System.Reflection.MethodInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.Execution.UnboundAction`1"/> class.
            </summary>
            <param name="methodInfo">The method info.</param>
        </member>
        <member name="M:Caliburn.Execution.UnboundAction`1.Execute(System.Object,System.Object[])">
            <summary>
            Executes the method on the specified instance with the specified parameters.
            </summary>
            <param name="instance">The instance.</param>
            <param name="parameters">The parameters.</param>
            <returns></returns>
        </member>
        <member name="M:Caliburn.Execution.UnboundAction`1.AsyncExecute(System.Object,System.AsyncCallback,System.Object,System.Object[])">
            <summary>
            Asynchronously executes the method on the specified instance with the specified parameters.
            </summary>
            <param name="instance">The instance.</param>
            <param name="callback">The callback.</param>
            <param name="state">The state.</param>
            <param name="parameters">The parameters.</param>
        </member>
        <member name="T:Caliburn.Execution.UnboundAction`2">
            <summary>
            Represents an unbound action.
            </summary>
            <typeparam name="TTarget">The type of the target.</typeparam>
            <typeparam name="TParam1">The type of the param1.</typeparam>
        </member>
        <member name="M:Caliburn.Execution.UnboundAction`2.#ctor(System.Reflection.MethodInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.Execution.UnboundAction`2"/> class.
            </summary>
            <param name="methodInfo">The method info.</param>
        </member>
        <member name="M:Caliburn.Execution.UnboundAction`2.Execute(System.Object,System.Object[])">
            <summary>
            Executes the method on the specified instance with the specified parameters.
            </summary>
            <param name="instance">The instance.</param>
            <param name="parameters">The parameters.</param>
            <returns></returns>
        </member>
        <member name="M:Caliburn.Execution.UnboundAction`2.AsyncExecute(System.Object,System.AsyncCallback,System.Object,System.Object[])">
            <summary>
            Asynchronously executes the method on the specified instance with the specified parameters.
            </summary>
            <param name="instance">The instance.</param>
            <param name="callback">The callback.</param>
            <param name="state">The state.</param>
            <param name="parameters">The parameters.</param>
        </member>
        <member name="T:Caliburn.Execution.UnboundAction`3">
            <summary>
            Represents an unbound action.
            </summary>
            <typeparam name="TTarget">The type of the target.</typeparam>
            <typeparam name="TParam1">The type of the param1.</typeparam>
            <typeparam name="TParam2">The type of the param2.</typeparam>
        </member>
        <member name="M:Caliburn.Execution.UnboundAction`3.#ctor(System.Reflection.MethodInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.Execution.UnboundAction`3"/> class.
            </summary>
            <param name="methodInfo">The method info.</param>
        </member>
        <member name="M:Caliburn.Execution.UnboundAction`3.Execute(System.Object,System.Object[])">
            <summary>
            Executes the method on the specified instance with the specified parameters.
            </summary>
            <param name="instance">The instance.</param>
            <param name="parameters">The parameters.</param>
            <returns></returns>
        </member>
        <member name="M:Caliburn.Execution.UnboundAction`3.AsyncExecute(System.Object,System.AsyncCallback,System.Object,System.Object[])">
            <summary>
            Asynchronously executes the method on the specified instance with the specified parameters.
            </summary>
            <param name="instance">The instance.</param>
            <param name="callback">The callback.</param>
            <param name="state">The state.</param>
            <param name="parameters">The parameters.</param>
        </member>
        <member name="T:Caliburn.Execution.UnboundAction`4">
            <summary>
            Represents an unbound action.
            </summary>
            <typeparam name="TTarget">The type of the target.</typeparam>
            <typeparam name="TParam1">The type of the param1.</typeparam>
            <typeparam name="TParam2">The type of the param2.</typeparam>
            <typeparam name="TParam3">The type of the param3.</typeparam>
        </member>
        <member name="M:Caliburn.Execution.UnboundAction`4.#ctor(System.Reflection.MethodInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.Execution.UnboundAction`4"/> class.
            </summary>
            <param name="methodInfo">The method info.</param>
        </member>
        <member name="M:Caliburn.Execution.UnboundAction`4.Execute(System.Object,System.Object[])">
            <summary>
            Executes the method on the specified instance with the specified parameters.
            </summary>
            <param name="instance">The instance.</param>
            <param name="parameters">The parameters.</param>
            <returns></returns>
        </member>
        <member name="M:Caliburn.Execution.UnboundAction`4.AsyncExecute(System.Object,System.AsyncCallback,System.Object,System.Object[])">
            <summary>
            Asynchronously executes the method on the specified instance with the specified parameters.
            </summary>
            <param name="instance">The instance.</param>
            <param name="callback">The callback.</param>
            <param name="state">The state.</param>
            <param name="parameters">The parameters.</param>
        </member>
        <member name="T:Caliburn.Execution.UnboundAction`5">
            <summary>
            Represents an unbound action.
            </summary>
            <typeparam name="TTarget">The type of the target.</typeparam>
            <typeparam name="TParam1">The type of the param1.</typeparam>
            <typeparam name="TParam2">The type of the param2.</typeparam>
            <typeparam name="TParam3">The type of the param3.</typeparam>
            <typeparam name="TParam4">The type of the param4.</typeparam>
        </member>
        <member name="M:Caliburn.Execution.UnboundAction`5.#ctor(System.Reflection.MethodInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.Execution.UnboundAction`5"/> class.
            </summary>
            <param name="methodInfo">The method info.</param>
        </member>
        <member name="M:Caliburn.Execution.UnboundAction`5.Execute(System.Object,System.Object[])">
            <summary>
            Executes the method on the specified instance with the specified parameters.
            </summary>
            <param name="instance">The instance.</param>
            <param name="parameters">The parameters.</param>
            <returns></returns>
        </member>
        <member name="M:Caliburn.Execution.UnboundAction`5.AsyncExecute(System.Object,System.AsyncCallback,System.Object,System.Object[])">
            <summary>
            Asynchronously executes the method on the specified instance with the specified parameters.
            </summary>
            <param name="instance">The instance.</param>
            <param name="callback">The callback.</param>
            <param name="state">The state.</param>
            <param name="parameters">The parameters.</param>
        </member>
        <member name="T:Caliburn.Events.Brokering.PublishExtension">
            <summary>
            A markup extension that eases the creation of a <see cref="T:Caliburn.Events.Brokering.Publication"/>.
            </summary>
        </member>
        <member name="M:Caliburn.Events.Brokering.PublishExtension.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.Events.Brokering.PublishExtension"/> class.
            </summary>
        </member>
        <member name="M:Caliburn.Events.Brokering.PublishExtension.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.Events.Brokering.PublishExtension"/> class.
            </summary>
            <param name="eventName">Name of the event.</param>
        </member>
        <member name="M:Caliburn.Events.Brokering.PublishExtension.ProvideValue(System.IServiceProvider)">
            <summary>
            When implemented in a derived class, returns an object that is set as the value of the target property for this markup extension.
            </summary>
            <param name="serviceProvider">Object that can provide services for the markup extension.</param>
            <returns>
            The object value to set on the property where the extension is applied.
            </returns>
        </member>
        <member name="P:Caliburn.Events.Brokering.PublishExtension.EventName">
            <summary>
            Gets or sets the name of the event.
            </summary>
            <value>The name of the event.</value>
        </member>
        <member name="P:Caliburn.Events.Brokering.PublishExtension.Strategy">
            <summary>
            Gets or sets the strategy.
            </summary>
            <value>The strategy.</value>
        </member>
        <member name="P:Caliburn.Events.Brokering.PublishExtension.IsAsync">
            <summary>
            Gets or sets a value indicating whether the event should be publishes asynchronously.
            </summary>
            <value><c>true</c> if is asynchronous; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Caliburn.PlatformCapabilities.OpenFileDialogImplementer">
            <summary>
            A standard windows implementation of <see cref="T:Caliburn.Services.IOpenFileDialog"/>.
            </summary>
        </member>
        <member name="T:Caliburn.PlatformCapabilities.FileDialogImplementer`1">
            <summary>
            A standard windows implementation of <see cref="T:Caliburn.Services.IFileDialog"/>.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:Caliburn.PlatformCapabilities.CommonDialogImplementer`1">
            <summary>
            A standard windows implementaion of <see cref="T:Caliburn.Services.ICommonDialog"/>.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Caliburn.PlatformCapabilities.CommonDialogImplementer`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.PlatformCapabilities.CommonDialogImplementer`1"/> class.
            </summary>
            <param name="dialog">The dialog.</param>
        </member>
        <member name="M:Caliburn.PlatformCapabilities.CommonDialogImplementer`1.ShowDialog">
            <summary>
            Displays a common dialog.
            </summary>
            <returns>
            If the user clicks the OK button of the dialog that is displayed, true is returned; otherwise, false.
            </returns>
        </member>
        <member name="M:Caliburn.PlatformCapabilities.CommonDialogImplementer`1.Reset">
            <summary>
            Resets the properties of a common dialog to their default values.
            </summary>
        </member>
        <member name="P:Caliburn.PlatformCapabilities.CommonDialogImplementer`1.Tag">
            <summary>
            Gets or sets an object associated with the dialog.
            This provides the ability to attach an arbitrary object to the dialog.
            </summary>
            <value>The tag.</value>
        </member>
        <member name="M:Caliburn.PlatformCapabilities.FileDialogImplementer`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.PlatformCapabilities.FileDialogImplementer`1"/> class.
            </summary>
            <param name="dialog">The dialog.</param>
        </member>
        <member name="P:Caliburn.PlatformCapabilities.FileDialogImplementer`1.CheckPathExists">
            <summary>
            Gets or sets a value that specifies whether warnings are displayed if the user types invalid paths and filenames.
            </summary>
            <value><c>true</c> if warnings are displayed; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Caliburn.PlatformCapabilities.FileDialogImplementer`1.CheckFileExists">
            <summary>
            Gets or sets a value indicating whether a file dialog displays a warning if the user specifies a filename that does not exist.
            </summary>
            <value><c>true</c> if warnings are displayed; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Caliburn.PlatformCapabilities.FileDialogImplementer`1.AddExtension">
            <summary>
            Gets or sets a value indicating whether a file dialog automatically adds an extension to a filename if the user omits an extension.
            </summary>
            <value><c>true</c> if extensions are added; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Caliburn.PlatformCapabilities.FileDialogImplementer`1.DefaultExt">
            <summary>
            Gets or sets a value that specifies the default extension string to use to filter the list of files that are displayed.
            </summary>
            <value>The default extension string.</value>
        </member>
        <member name="P:Caliburn.PlatformCapabilities.FileDialogImplementer`1.DereferenceLinks">
            <summary>
            Gets or sets a value indicating whether a file dialog returns either the location of the file referenced by a shortcut or the location of the shortcut file (.lnk).
            </summary>
            <value>
            	<c>true</c> to return the location referenced; <c>false</c> to return the shortcut location.
            </value>
        </member>
        <member name="P:Caliburn.PlatformCapabilities.FileDialogImplementer`1.FileNames">
            <summary>
            Gets an array that contains one filename for each selected file.
            </summary>
            <value>
            An array that contains one filename for each selected file. The default is an array with a single item whose value is System.String.Empty.
            </value>
        </member>
        <member name="P:Caliburn.PlatformCapabilities.FileDialogImplementer`1.FileName">
            <summary>
            Gets or sets a string containing the full path of the file selected in a file dialog.
            </summary>
            <value>The full path of the file selected in the file dialog.</value>
        </member>
        <member name="P:Caliburn.PlatformCapabilities.FileDialogImplementer`1.ValidateNames">
            <summary>
            Gets or sets a value indicating whether the dialog accepts only valid filenames.
            </summary>
            <value>
            	<c>true</c> f warnings will be shown when an invalid filename is provided; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Caliburn.PlatformCapabilities.FileDialogImplementer`1.Title">
            <summary>
            Gets or sets the text that appears in the title bar of a file dialog.
            </summary>
            <value>
            The text that appears in the title bar of a file dialog. The default is System.String.Empty.
            </value>
        </member>
        <member name="P:Caliburn.PlatformCapabilities.FileDialogImplementer`1.SafeFileNames">
            <summary>
            Gets an array that contains one safe file name for each selected file.
            </summary>
            <value>
            An array that contains one safe file name for each selected file. The default is an array with a single item whose value is System.String.Empty.
            </value>
        </member>
        <member name="P:Caliburn.PlatformCapabilities.FileDialogImplementer`1.SafeFileName">
            <summary>
            Gets a string that only contains the filename for the selected file.
            </summary>
            <value>
            The filename for the selected file. The default is System.String.Empty, which is also the value when either no file is selected or a directory is selected.
            </value>
        </member>
        <member name="P:Caliburn.PlatformCapabilities.FileDialogImplementer`1.RestoreDirectory">
            <summary>
            Gets or sets a value that causes a file dialog to restore its current directory to the original value before a user changes directory to search for files.
            </summary>
            <value>
            	<c>true</c> if directory should be restored after a search; <c>false</c> to use whatever directory string remained from search.
            </value>
        </member>
        <member name="P:Caliburn.PlatformCapabilities.FileDialogImplementer`1.InitialDirectory">
            <summary>
            Gets or sets the initial directory that is displayed by a file dialog.
            </summary>
            <value>The initial directory.</value>
        </member>
        <member name="P:Caliburn.PlatformCapabilities.FileDialogImplementer`1.FilterIndex">
            <summary>
            Gets or sets the index of the filter currently selected in a file dialog.
            </summary>
            <value>The index of the filter.</value>
        </member>
        <member name="P:Caliburn.PlatformCapabilities.FileDialogImplementer`1.Filter">
            <summary>
            Gets or sets the filter string that determines what types of files are displayed.
            </summary>
            <value>The filter.</value>
        </member>
        <member name="E:Caliburn.PlatformCapabilities.FileDialogImplementer`1.FileOk">
            <summary>
            Occurs when the user selects a filename by either clicking the Open button or the Save button.
            </summary>
        </member>
        <member name="M:Caliburn.PlatformCapabilities.OpenFileDialogImplementer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.PlatformCapabilities.OpenFileDialogImplementer"/> class.
            </summary>
        </member>
        <member name="M:Caliburn.PlatformCapabilities.OpenFileDialogImplementer.OpenFile">
            <summary>
            Opens a read-only stream for the file that is selected by the user.
            </summary>
            <returns>
            A new System.IO.Stream that contains the selected file.
            </returns>
        </member>
        <member name="M:Caliburn.PlatformCapabilities.OpenFileDialogImplementer.OpenFiles">
            <summary>
            Creates an array that contains one read-only stream for each file selected by the user.
            </summary>
            <returns>
            An array of multiple new System.IO.Stream objects that contain the selected files.
            </returns>
        </member>
        <member name="P:Caliburn.PlatformCapabilities.OpenFileDialogImplementer.Multiselect">
            <summary>
            Gets or sets an option indicating whether the dialog allows users to select multiple files.
            </summary>
            <value>
            	<c>true</c> if multiple selections are allowed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Caliburn.PlatformCapabilities.OpenFileDialogImplementer.ReadOnlyChecked">
            <summary>
            Gets or sets a value indicating whether the read-only check box displayed is selected.
            </summary>
            <value>
            	<c>true</c> if the checkbox is selected; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Caliburn.PlatformCapabilities.OpenFileDialogImplementer.ShowReadOnly">
            <summary>
            Gets or sets a value indicating whether the dialog contains a read-only check box.
            </summary>
            <value>
            	<c>true</c> if the checkbox is displayed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Caliburn.Events.Aggregation.EventExtension">
            <summary>
            A markup extension that aids in the creation of an <see cref="T:Caliburn.Events.Aggregation.EventMessage"/>.
            </summary>
        </member>
        <member name="M:Caliburn.Events.Aggregation.EventExtension.ProvideValue(System.IServiceProvider)">
            <summary>
            When implemented in a derived class, returns an object that is set as the value of the target property for this markup extension.
            </summary>
            <param name="serviceProvider">Object that can provide services for the markup extension.</param>
            <returns>
            The object value to set on the property where the extension is applied.
            </returns>
        </member>
        <member name="P:Caliburn.Events.Aggregation.EventExtension.IsAsync">
            <summary>
            Gets or sets a value indicating whether the message will be sent asynchronously.
            </summary>
            <value><c>true</c> if is asynchronous; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Caliburn.Events.Aggregation.EventExtension.Trigger">
            <summary>
            Gets or sets the trigger.
            </summary>
            <value>The trigger.</value>
        </member>
        <member name="P:Caliburn.Events.Aggregation.EventExtension.ParamValue">
            <summary>
            Sets the param value.
            </summary>
            <value>The param value.</value>
        </member>
        <member name="P:Caliburn.Events.Aggregation.EventExtension.ParamBinding">
            <summary>
            Sets the param binding.
            </summary>
            <value>The param binding.</value>
        </member>
        <member name="T:Caliburn.Controls.Transitions.StoryboardTransition">
            <summary>
            Supports transitions based on styles and storyboards.
            </summary>
        </member>
        <member name="F:Caliburn.Controls.Transitions.StoryboardTransition.NewContentStoryboardProperty">
            <summary>
            A dependency property representing the NewContentStoryboard property.
            </summary>
        </member>
        <member name="F:Caliburn.Controls.Transitions.StoryboardTransition.NewContentStyleProperty">
            <summary>
            A dependency property representing the NewContentStyle property.
            </summary>
        </member>
        <member name="F:Caliburn.Controls.Transitions.StoryboardTransition.OldContentStoryboardProperty">
            <summary>
            A dependency property representing the OldContentStoryboard property.
            </summary>
        </member>
        <member name="F:Caliburn.Controls.Transitions.StoryboardTransition.OldContentStyleProperty">
            <summary>
            A dependency property representing the OldContentStyle property.
            </summary>
        </member>
        <member name="P:Caliburn.Controls.Transitions.StoryboardTransition.OldContentStyle">
            <summary>
            Gets or sets the old content style.
            </summary>
            <value>The old content style.</value>
        </member>
        <member name="P:Caliburn.Controls.Transitions.StoryboardTransition.OldContentStoryboard">
            <summary>
            Gets or sets the old content storyboard.
            </summary>
            <value>The old content storyboard.</value>
        </member>
        <member name="P:Caliburn.Controls.Transitions.StoryboardTransition.NewContentStyle">
            <summary>
            Gets or sets the new content style.
            </summary>
            <value>The new content style.</value>
        </member>
        <member name="P:Caliburn.Controls.Transitions.StoryboardTransition.NewContentStoryboard">
            <summary>
            Gets or sets the new content storyboard.
            </summary>
            <value>The new content storyboard.</value>
        </member>
        <member name="T:Caliburn.Controls.Transitions.DoorTransition">
            <summary>
            A door transition.
            </summary>
        </member>
        <member name="T:Caliburn.Controls.Transitions.Transition3DBase">
            <summary>
            A base class for 3D transitions.
            </summary>
        </member>
        <member name="F:Caliburn.Controls.Transitions.Transition3DBase.FieldOfViewProperty">
            <summary>
            A dependency property that represents FieldOfView.
            </summary>
        </member>
        <member name="F:Caliburn.Controls.Transitions.Transition3DBase.LightProperty">
            <summary>
            A dependency property that represents Light.
            </summary>
        </member>
        <member name="M:Caliburn.Controls.Transitions.Transition3DBase.BeginTransition(Caliburn.Controls.TransitionPresenter,System.Windows.Controls.ContentPresenter,System.Windows.Controls.ContentPresenter)">
            <summary>
            Setup the Viewport 3D
            </summary>
            <param name="transitionElement">The transition element.</param>
            <param name="oldContent">The old content.</param>
            <param name="newContent">The new content.</param>
        </member>
        <member name="M:Caliburn.Controls.Transitions.Transition3DBase.CreateMesh(System.Windows.Media.Media3D.Point3D,System.Windows.Media.Media3D.Vector3D,System.Windows.Media.Media3D.Vector3D,System.Int32,System.Int32,System.Windows.Rect)">
            <summary>
            Generates a flat mesh starting at origin with sides equal to u and v vectors.
            </summary>
            <param name="origin">The origin.</param>
            <param name="u">The u.</param>
            <param name="v">The v.</param>
            <param name="usteps">The usteps.</param>
            <param name="vsteps">The vsteps.</param>
            <param name="textureBounds">The texture bounds.</param>
            <returns></returns>
        </member>
        <member name="P:Caliburn.Controls.Transitions.Transition3DBase.FieldOfView">
            <summary>
            Gets or sets the field of view.
            </summary>
            <value>The field of view.</value>
        </member>
        <member name="P:Caliburn.Controls.Transitions.Transition3DBase.Light">
            <summary>
            Gets or sets the light.
            </summary>
            <value>The light.</value>
        </member>
        <member name="F:Caliburn.Controls.Transitions.DoorTransition.DurationProperty">
            <summary>
            A dependency property representing Duration.
            </summary>
        </member>
        <member name="P:Caliburn.Controls.Transitions.DoorTransition.Duration">
            <summary>
            Gets or sets the duration.
            </summary>
            <value>The duration.</value>
        </member>
        <member name="T:Caliburn.Actions.AsynchronousActionExecutor">
            <summary>
            Executes an action asynchronously.
            </summary>
        </member>
        <member name="M:Caliburn.Actions.AsynchronousActionExecutor.#ctor(Caliburn.Metadata.ActionInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.Actions.AsynchronousActionExecutor"/> class.
            </summary>
            <param name="actionInfo">The action info.</param>
        </member>
        <member name="M:Caliburn.Actions.AsynchronousActionExecutor.Execute(System.Windows.DependencyObject,Caliburn.Messaging.ActionMessage,System.Object)">
            <summary>
            Executes the specified action message on the target from the source.
            </summary>
            <param name="messageSource">The message source.</param>
            <param name="message">The message.</param>
            <param name="target">The target.</param>
        </member>
        <member name="P:Caliburn.Actions.AsynchronousActionExecutor.HasCallback">
            <summary>
            Gets a value indicating whether this instance has a callback.
            </summary>
            <value>
            	<c>true</c> if this instance has a callback; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Caliburn.Actions.AsynchronousActionExecutor.HasPreview">
            <summary>
            Gets a value indicating whether this instance has a synchronous preview method.
            </summary>
            <value>
            	<c>true</c> if this instance has preview; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Caliburn.Actions.ActionCommand">
            <summary>
            A command implementation allowing exectution of Caliburn actions.
            </summary>
        </member>
        <member name="M:Caliburn.Actions.ActionCommand.#ctor(System.Object,System.String,System.Func{System.Object,System.Boolean})">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.Actions.ActionCommand"/> class.
            </summary>
            <param name="presenter">The presenter.</param>
            <param name="actionName">Name of the action.</param>
            <param name="canExecute">The can execute.</param>
        </member>
        <member name="M:Caliburn.Actions.ActionCommand.#ctor(System.Object,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.Actions.ActionCommand"/> class.
            </summary>
            <param name="presenter">The presenter.</param>
            <param name="actionName">Name of the action.</param>
        </member>
        <member name="M:Caliburn.Actions.ActionCommand.#ctor(System.Action{System.Object},System.Func{System.Object,System.Boolean})">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.Actions.ActionCommand"/> class.
            </summary>
            <param name="action">The action.</param>
            <param name="canExecute">The can execute.</param>
        </member>
        <member name="M:Caliburn.Actions.ActionCommand.#ctor(System.Action{System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.Actions.ActionCommand"/> class.
            </summary>
            <param name="action">The action.</param>
        </member>
        <member name="M:Caliburn.Actions.ActionCommand.#ctor(System.Action,System.Func{System.Object,System.Boolean})">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.Actions.ActionCommand"/> class.
            </summary>
            <param name="action">The action.</param>
            <param name="canExecute">The can execute.</param>
        </member>
        <member name="M:Caliburn.Actions.ActionCommand.#ctor(System.Action)">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.Actions.ActionCommand"/> class.
            </summary>
            <param name="action">The action.</param>
        </member>
        <member name="M:Caliburn.Actions.ActionCommand.Execute(System.Object)">
            <summary>
            Defines the method to be called when the command is invoked.
            </summary>
            <param name="parameter">Data used by the command.  If the command does not require data to be passed, this object can be set to null.</param>
        </member>
        <member name="M:Caliburn.Actions.ActionCommand.CanExecute(System.Object)">
            <summary>
            Defines the method that determines whether the command can execute in its current state.
            </summary>
            <param name="parameter">Data used by the command.  If the command does not require data to be passed, this object can be set to null.</param>
            <returns>
            true if this command can be executed; otherwise, false.
            </returns>
        </member>
        <member name="E:Caliburn.Actions.ActionCommand.CanExecuteChanged">
            <summary>
            Occurs when changes occur that affect whether or not the command should execute.
            </summary>
        </member>
        <member name="T:Caliburn.Testability.StubSaveFileDialog">
            <summary>
            A stub version of <see cref="T:Caliburn.Services.ISaveFileDialog"/>.
            </summary>
        </member>
        <member name="T:Caliburn.Services.ISaveFileDialog">
            <summary>
            Represents a common dialog that allows the user to specify a filename to save a file as.
            </summary>
        </member>
        <member name="M:Caliburn.Services.ISaveFileDialog.OpenFile">
            <summary>
            Creates a read-write file stream for the filename selected by the user.
            </summary>
            <returns>A new System.IO.Stream that contains the selected file.</returns>
        </member>
        <member name="P:Caliburn.Services.ISaveFileDialog.OverwritePrompt">
            <summary>
            Gets or sets a value indicating whether the dialog displays a warning if the user specifies the name of a file that already exists.
            </summary>
            <value><c>true</c> if dialog should prompt prior to saving over a filename that previously existed; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Caliburn.Services.ISaveFileDialog.CreatePrompt">
            <summary>
            Gets or sets a value indicating whether the dialog prompts the user for permission to create a file if the user specifies a file that does not exist.
            </summary>
            <value><c>true</c> if dialog should prompt prior to saving to a filename that did not previously exist; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Caliburn.Testability.StubSaveFileDialog.OpenFile">
            <summary>
            Creates a read-write file stream for the filename selected by the user.
            </summary>
            <returns>
            A new System.IO.Stream that contains the selected file.
            </returns>
        </member>
        <member name="M:Caliburn.Testability.StubSaveFileDialog.ShowDialog">
            <summary>
            Displays a common dialog.
            </summary>
            <returns>
            If the user clicks the OK button of the dialog that is displayed, true is returned; otherwise, false.
            </returns>
        </member>
        <member name="M:Caliburn.Testability.StubSaveFileDialog.Reset">
            <summary>
            Resets the properties of a common dialog to their default values.
            </summary>
        </member>
        <member name="P:Caliburn.Testability.StubSaveFileDialog.DialogResult">
            <summary>
            Gets or sets the dialog result.
            </summary>
            <value>The dialog result.</value>
        </member>
        <member name="P:Caliburn.Testability.StubSaveFileDialog.OverwritePrompt">
            <summary>
            Gets or sets a value indicating whether the dialog displays a warning if the user specifies the name of a file that already exists.
            </summary>
            <value>
            	<c>true</c> if dialog should prompt prior to saving over a filename that previously existed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Caliburn.Testability.StubSaveFileDialog.CreatePrompt">
            <summary>
            Gets or sets a value indicating whether the dialog prompts the user for permission to create a file if the user specifies a file that does not exist.
            </summary>
            <value>
            	<c>true</c> if dialog should prompt prior to saving to a filename that did not previously exist; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Caliburn.Testability.StubSaveFileDialog.CheckPathExists">
            <summary>
            Gets or sets a value that specifies whether warnings are displayed if the user types invalid paths and filenames.
            </summary>
            <value><c>true</c> if warnings are displayed; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Caliburn.Testability.StubSaveFileDialog.CheckFileExists">
            <summary>
            Gets or sets a value indicating whether a file dialog displays a warning if the user specifies a filename that does not exist.
            </summary>
            <value><c>true</c> if warnings are displayed; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Caliburn.Testability.StubSaveFileDialog.AddExtension">
            <summary>
            Gets or sets a value indicating whether a file dialog automatically adds an extension to a filename if the user omits an extension.
            </summary>
            <value><c>true</c> if extensions are added; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Caliburn.Testability.StubSaveFileDialog.DefaultExt">
            <summary>
            Gets or sets a value that specifies the default extension string to use to filter the list of files that are displayed.
            </summary>
            <value>The default extension string.</value>
        </member>
        <member name="P:Caliburn.Testability.StubSaveFileDialog.DereferenceLinks">
            <summary>
            Gets or sets a value indicating whether a file dialog returns either the location of the file referenced by a shortcut or the location of the shortcut file (.lnk).
            </summary>
            <value>
            	<c>true</c> to return the location referenced; <c>false</c> to return the shortcut location.
            </value>
        </member>
        <member name="P:Caliburn.Testability.StubSaveFileDialog.FileNames">
            <summary>
            Gets an array that contains one filename for each selected file.
            </summary>
            <value>
            An array that contains one filename for each selected file. The default is an array with a single item whose value is System.String.Empty.
            </value>
        </member>
        <member name="P:Caliburn.Testability.StubSaveFileDialog.FileName">
            <summary>
            Gets or sets a string containing the full path of the file selected in a file dialog.
            </summary>
            <value>The full path of the file selected in the file dialog.</value>
        </member>
        <member name="P:Caliburn.Testability.StubSaveFileDialog.ValidateNames">
            <summary>
            Gets or sets a value indicating whether the dialog accepts only valid filenames.
            </summary>
            <value>
            	<c>true</c> f warnings will be shown when an invalid filename is provided; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Caliburn.Testability.StubSaveFileDialog.Title">
            <summary>
            Gets or sets the text that appears in the title bar of a file dialog.
            </summary>
            <value>
            The text that appears in the title bar of a file dialog. The default is System.String.Empty.
            </value>
        </member>
        <member name="P:Caliburn.Testability.StubSaveFileDialog.SafeFileNames">
            <summary>
            Gets an array that contains one safe file name for each selected file.
            </summary>
            <value>
            An array that contains one safe file name for each selected file. The default is an array with a single item whose value is System.String.Empty.
            </value>
        </member>
        <member name="P:Caliburn.Testability.StubSaveFileDialog.SafeFileName">
            <summary>
            Gets a string that only contains the filename for the selected file.
            </summary>
            <value>
            The filename for the selected file. The default is System.String.Empty, which is also the value when either no file is selected or a directory is selected.
            </value>
        </member>
        <member name="P:Caliburn.Testability.StubSaveFileDialog.RestoreDirectory">
            <summary>
            Gets or sets a value that causes a file dialog to restore its current directory to the original value before a user changes directory to search for files.
            </summary>
            <value>
            	<c>true</c> if directory should be restored after a search; <c>false</c> to use whatever directory string remained from search.
            </value>
        </member>
        <member name="P:Caliburn.Testability.StubSaveFileDialog.InitialDirectory">
            <summary>
            Gets or sets the initial directory that is displayed by a file dialog.
            </summary>
            <value>The initial directory.</value>
        </member>
        <member name="P:Caliburn.Testability.StubSaveFileDialog.FilterIndex">
            <summary>
            Gets or sets the index of the filter currently selected in a file dialog.
            </summary>
            <value>The index of the filter.</value>
        </member>
        <member name="P:Caliburn.Testability.StubSaveFileDialog.Filter">
            <summary>
            Gets or sets the filter string that determines what types of files are displayed.
            </summary>
            <value>The filter.</value>
        </member>
        <member name="E:Caliburn.Testability.StubSaveFileDialog.FileOk">
            <summary>
            Occurs when the user selects a filename by either clicking the Open button or the Save button.
            </summary>
        </member>
        <member name="P:Caliburn.Testability.StubSaveFileDialog.Tag">
            <summary>
            Gets or sets an object associated with the dialog.
            This provides the ability to attach an arbitrary object to the dialog.
            </summary>
            <value>The tag.</value>
        </member>
        <member name="T:Caliburn.Testability.StubPresenterManager">
            <summary>
            A stub version of <see cref="T:Caliburn.Services.IPresenterManager"/>.
            </summary>
        </member>
        <member name="T:Caliburn.Services.IPresenterManager">
            <summary>
            A service that manages various aspects of presenters such as binding and metadata.
            </summary>
        </member>
        <member name="M:Caliburn.Services.IPresenterManager.AddBinding(System.Object,System.Windows.DependencyObject)">
            <summary>
            Binds a presenter to a view.
            </summary>
            <param name="presenter">The presenter.</param>
            <param name="target">The target view.</param>
        </member>
        <member name="M:Caliburn.Services.IPresenterManager.RemoveBinding(System.Windows.DependencyObject)">
            <summary>
            Unbinds a presenter from a view.
            </summary>
            <param name="target">The target view.</param>
        </member>
        <member name="M:Caliburn.Services.IPresenterManager.GetBinding(System.Windows.DependencyObject)">
            <summary>
            Determines the presenter that handles the view.
            </summary>
            <param name="target">The target view.</param>
            <returns>The binding.</returns>
        </member>
        <member name="M:Caliburn.Services.IPresenterManager.GetInfo(System.Type)">
            <summary>
            Gets metadata about the presenter.
            </summary>
            <param name="presenterType">Type of the presenter.</param>
            <returns>The presenter metadata.</returns>
        </member>
        <member name="M:Caliburn.Services.IPresenterManager.GetBoundViews(System.Object)">
            <summary>
            Returns all views that are bound to the presenter instance.
            </summary>
            <param name="presenter">The presenter instance.</param>
            <returns>A list of bound views.</returns>
        </member>
        <member name="M:Caliburn.Testability.StubPresenterManager.AddBinding(System.Object,System.Windows.DependencyObject)">
            <summary>
            Binds a presenter to a view.
            </summary>
            <param name="presenter">The presenter.</param>
            <param name="target">The target view.</param>
        </member>
        <member name="M:Caliburn.Testability.StubPresenterManager.RemoveBinding(System.Windows.DependencyObject)">
            <summary>
            Unbinds a presenter from a view.
            </summary>
            <param name="target">The target view.</param>
        </member>
        <member name="M:Caliburn.Testability.StubPresenterManager.GetBinding(System.Windows.DependencyObject)">
            <summary>
            Determines the presenter that handles the view.
            </summary>
            <param name="target">The target view.</param>
            <returns>The binding.</returns>
        </member>
        <member name="M:Caliburn.Testability.StubPresenterManager.GetInfo(System.Type)">
            <summary>
            Gets metadata about the presenter.
            </summary>
            <param name="presenterType">Type of the presenter.</param>
            <returns>The presenter metadata.</returns>
        </member>
        <member name="M:Caliburn.Testability.StubPresenterManager.GetBoundViews(System.Object)">
            <summary>
            Returns all views that are bound to the presenter instance.
            </summary>
            <param name="presenter">The presenter instance.</param>
            <returns>A list of bound views.</returns>
        </member>
        <member name="T:Caliburn.Messaging.ActionMessage">
            <summary>
            A message capable of executing an action.
            </summary>
        </member>
        <member name="T:Caliburn.Messaging.MessageBase">
            <summary>
            The base class for messages.
            </summary>
        </member>
        <member name="M:Caliburn.Messaging.MessageBase.Send(System.Windows.DependencyObject)">
            <summary>
            Sends the message from the specified source.
            </summary>
            <param name="source">The source.</param>
        </member>
        <member name="P:Caliburn.Messaging.MessageBase.Trigger">
            <summary>
            Gets or sets the trigger that causes the message to be sent.
            </summary>
            <value>The trigger.</value>
        </member>
        <member name="P:Caliburn.Messaging.MessageBase.Parameters">
            <summary>
            Gets or sets the parameters sent with the message.
            </summary>
            <value>The parameters.</value>
        </member>
        <member name="P:Caliburn.Messaging.MessageBase.NameScope">
            <summary>
            Gets or sets the <see cref="T:System.Windows.Markup.INameScope"/> that enables paramter binding.
            </summary>
            <value>The name scope.</value>
        </member>
        <member name="M:Caliburn.Messaging.ActionMessage.Send(System.Windows.DependencyObject)">
            <summary>
            Sends the message from the specified source.
            </summary>
            <param name="source">The source.</param>
        </member>
        <member name="P:Caliburn.Messaging.ActionMessage.Action">
            <summary>
            Gets or sets the action that the message will execute.
            </summary>
            <value>The action.</value>
        </member>
        <member name="P:Caliburn.Messaging.ActionMessage.ForwardInfo">
            <summary>
            Gets the method path if it is not directly related to the presenter.
            </summary>
            <value>The forward info.</value>
        </member>
        <member name="P:Caliburn.Messaging.ActionMessage.RequiresForwarding">
            <summary>
            Gets a value indicating whether the action requires forwarding.
            </summary>
            <value><c>true</c> if the action requires forwarding; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Caliburn.Messaging.ActionMessage.Return">
            <summary>
            Gets or sets the binding that the action's return value will be attached to.
            </summary>
            <value>The return.</value>
        </member>
        <member name="T:Caliburn.Services.IViewManager">
            <summary>
            A service that manages various aspects of views such as messages and default settings.
            </summary>
        </member>
        <member name="M:Caliburn.Services.IViewManager.ConfigureMessageSource(System.Windows.DependencyObject,Caliburn.Messaging.MessageBase)">
            <summary>
            Configures the source view as a sender of the provided message.
            </summary>
            <param name="source">The source view.</param>
            <param name="message">The message.</param>
        </member>
        <member name="M:Caliburn.Services.IViewManager.RegisterDefaults(Caliburn.Metadata.ElementDefaults)">
            <summary>
            Registers default settings for an element.  Caliburn will fallback to these values
            when various information is not provided by the developer.
            </summary>
            <param name="defaults">The defaults.</param>
        </member>
        <member name="M:Caliburn.Services.IViewManager.GetDefaults(System.Type)">
            <summary>
            Gets the default settings for an element type.
            </summary>
            <param name="elementType">Type of the element.</param>
            <returns>The element type's default settings.</returns>
        </member>
        <member name="T:Caliburn.MarkupExtensions.ActionExtension">
            <summary>
            A Markup Extension that eases the creation of an <see cref="T:Caliburn.Messaging.ActionMessage"/>.
            </summary>
        </member>
        <member name="M:Caliburn.MarkupExtensions.ActionExtension.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.MarkupExtensions.ActionExtension"/> class.
            </summary>
        </member>
        <member name="M:Caliburn.MarkupExtensions.ActionExtension.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.MarkupExtensions.ActionExtension"/> class.
            </summary>
            <param name="action">The action.</param>
        </member>
        <member name="M:Caliburn.MarkupExtensions.ActionExtension.ProvideValue(System.IServiceProvider)">
            <summary>
            When implemented in a derived class, returns an object that is set as the value of the target property for this markup extension.
            </summary>
            <param name="serviceProvider">Object that can provide services for the markup extension.</param>
            <returns>
            The object value to set on the property where the extension is applied.
            </returns>
        </member>
        <member name="P:Caliburn.MarkupExtensions.ActionExtension.Action">
            <summary>
            Gets or sets the action.
            </summary>
            <value>The action.</value>
        </member>
        <member name="P:Caliburn.MarkupExtensions.ActionExtension.Return">
            <summary>
            Gets or sets the return binding.
            </summary>
            <value>The return.</value>
        </member>
        <member name="P:Caliburn.MarkupExtensions.ActionExtension.Trigger">
            <summary>
            Gets or sets the trigger.
            </summary>
            <value>The trigger.</value>
        </member>
        <member name="P:Caliburn.MarkupExtensions.ActionExtension.ParamValue">
            <summary>
            Sets the param value.
            </summary>
            <value>The param value.</value>
        </member>
        <member name="P:Caliburn.MarkupExtensions.ActionExtension.ParamBinding">
            <summary>
            Sets the param binding.
            </summary>
            <value>The param binding.</value>
        </member>
        <member name="T:Caliburn.Execution.UnboundAsyncState">
            <summary>
            Used internally by UnboundActions and UnboundFuncs to track asnychronous execution state.
            </summary>
        </member>
        <member name="M:Caliburn.Execution.UnboundAsyncState.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.Execution.UnboundAsyncState"/> class.
            </summary>
            <param name="state">The state.</param>
        </member>
        <member name="P:Caliburn.Execution.UnboundAsyncState.Exception">
            <summary>
            Gets or sets the exception throw during asynchronous execution.
            </summary>
            <value>The exception.</value>
        </member>
        <member name="P:Caliburn.Execution.UnboundAsyncState.OriginalState">
            <summary>
            Gets or sets the original async state object.
            </summary>
            <value>The state of the original.</value>
        </member>
        <member name="P:Caliburn.Execution.UnboundAsyncState.ReturnValue">
            <summary>
            Gets or sets the return value of the asynchronously executed method.
            </summary>
            <value>The return value.</value>
        </member>
        <member name="T:Caliburn.Modules.ModuleControllerFactory">
            <summary>
            An implementation of <see cref="T:Caliburn.Modules.IModuleControllerFactory"/>.
            </summary>
        </member>
        <member name="T:Caliburn.Modules.IModuleControllerFactory">
            <summary>
            Creates <see cref="T:Caliburn.Modules.IModuleController"/> instances.
            </summary>
        </member>
        <member name="M:Caliburn.Modules.IModuleControllerFactory.Create(Caliburn.Modules.IModuleDescription)">
            <summary>
            Creates a controller according to the description.
            </summary>
            <param name="description">The description.</param>
            <returns>A controller.</returns>
        </member>
        <member name="M:Caliburn.Modules.ModuleControllerFactory.Create(Caliburn.Modules.IModuleDescription)">
            <summary>
            Creates a controller according to the description.
            </summary>
            <param name="description">The description.</param>
            <returns>A controller.</returns>
        </member>
        <member name="T:Caliburn.Modules.ExtensionDescription">
            <summary>
            Describes an extension point used by a lazily loaded module.
            </summary>
        </member>
        <member name="M:Caliburn.Modules.ExtensionDescription.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.Modules.ExtensionDescription"/> class.
            </summary>
        </member>
        <member name="P:Caliburn.Modules.ExtensionDescription.Composite">
            <summary>
            Gets or sets the composite.
            </summary>
            <value>The composite.</value>
        </member>
        <member name="P:Caliburn.Modules.ExtensionDescription.OffsetOrigin">
            <summary>
            Gets or sets the offset origin.
            </summary>
            <value>The offset origin.</value>
        </member>
        <member name="P:Caliburn.Modules.ExtensionDescription.Offset">
            <summary>
            Gets or sets the offset.
            </summary>
            <value>The offset.</value>
        </member>
        <member name="P:Caliburn.Modules.ExtensionDescription.Source">
            <summary>
            Gets or sets the source.
            </summary>
            <value>The source.</value>
        </member>
        <member name="T:Caliburn.Events.Aggregation.EventMessage">
            <summary>
            A message type for loosely coupled events.
            </summary>
        </member>
        <member name="M:Caliburn.Events.Aggregation.EventMessage.Send(System.Windows.DependencyObject)">
            <summary>
            Sends the message from the specified source.
            </summary>
            <param name="source">The source.</param>
        </member>
        <member name="P:Caliburn.Events.Aggregation.EventMessage.IsAsync">
            <summary>
            Gets or sets a value indicating whether the message will be sent asynchronously.
            </summary>
            <value><c>true</c> if is asynchronous; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Caliburn.Controls.Transitions.FadeTransition">
            <summary>
            A fade transition.
            </summary>
        </member>
        <member name="F:Caliburn.Controls.Transitions.FadeTransition.DurationProperty">
            <summary>
            A dependency property representing Duration.
            </summary>
        </member>
        <member name="P:Caliburn.Controls.Transitions.FadeTransition.Duration">
            <summary>
            Gets or sets the duration.
            </summary>
            <value>The duration.</value>
        </member>
        <member name="T:Caliburn.Controls.Transitions.ExplosionTransition">
            <summary>
            An explosion transition.
            </summary>
        </member>
        <member name="F:Caliburn.Controls.Transitions.ExplosionTransition.DurationProperty">
            <summary>
            A dependency property representing Duration.
            </summary>
        </member>
        <member name="P:Caliburn.Controls.Transitions.ExplosionTransition.Duration">
            <summary>
            Gets or sets the duration.
            </summary>
            <value>The duration.</value>
        </member>
        <member name="T:Caliburn.StateManagement.StateWriter">
            <summary>
            Used by an <see cref="T:Caliburn.StateManagement.IPersister"/> to write out its state.
            </summary>
        </member>
        <member name="M:Caliburn.StateManagement.StateWriter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.StateManagement.StateWriter"/> class.
            </summary>
        </member>
        <member name="M:Caliburn.StateManagement.StateWriter.OpenContainer(System.String,System.Type)">
            <summary>
            Opens a new container for the purpose of writing complex values.
            </summary>
            <param name="key">The key.</param>
            <param name="type">The type.</param>
        </member>
        <member name="M:Caliburn.StateManagement.StateWriter.CloseContainer">
            <summary>
            Closes the container for a complex type.
            </summary>
        </member>
        <member name="M:Caliburn.StateManagement.StateWriter.AddValue(System.String,System.Object)">
            <summary>
            Add a simple value to the current container.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Caliburn.StateManagement.StateWriter.GetState">
            <summary>
            Gets the present state of writer.
            </summary>
            <returns>A container entry representing the current writer state.</returns>
        </member>
        <member name="T:Caliburn.Execution.UnboundMethodFactory">
            <summary>
            Creates instances of <see cref="T:Caliburn.Execution.IUnboundMethod"/>.
            </summary>
        </member>
        <member name="M:Caliburn.Execution.UnboundMethodFactory.Create(System.Reflection.MethodInfo)">
            <summary>
            Creates an instance of <see cref="T:Caliburn.Execution.IUnboundMethod"/> based on the supplies <see cref="T:System.Reflection.MethodInfo"/>.
            </summary>
            <param name="methodInfo">The method info.</param>
            <returns>An <see cref="T:Caliburn.Execution.IUnboundMethod"/>.</returns>
        </member>
        <member name="T:Caliburn.Events.Brokering.PublishAttribute">
            <summary>
            Represents metadata supporting declarative event publication.
            </summary>
        </member>
        <member name="M:Caliburn.Events.Brokering.PublishAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.Events.Brokering.PublishAttribute"/> class.
            </summary>
            <param name="eventName">Name of the event.</param>
        </member>
        <member name="M:Caliburn.Events.Brokering.PublishAttribute.BuildPublication">
            <summary>
            Builds the publication from the metadata.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Caliburn.Events.Brokering.PublishAttribute.EventName">
            <summary>
            Gets the name of the event.
            </summary>
            <value>The name of the event.</value>
        </member>
        <member name="P:Caliburn.Events.Brokering.PublishAttribute.Strategy">
            <summary>
            Gets or sets the strategy for publication.
            </summary>
            <value>The strategy.</value>
        </member>
        <member name="P:Caliburn.Events.Brokering.PublishAttribute.IsAsync">
            <summary>
            Gets or sets a value indicating whether the event will be published asynchronously.
            </summary>
            <value><c>true</c> if is asynchronous; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Caliburn.Modules.OffsetOrigin">
            <summary>
            When a UI extension is added to an <see cref="T:Caliburn.Composition.IComposite"/>, it must be inserted somewhere in the list of
            components.  This enumeration determines where the index should be calculated from.
            </summary>
        </member>
        <member name="F:Caliburn.Modules.OffsetOrigin.Beginning">
            <summary>
            Insertion index is calculated from the beginning of the list.
            </summary>
        </member>
        <member name="F:Caliburn.Modules.OffsetOrigin.End">
            <summary>
            Insertion index is calculated from end beginning of the list.
            </summary>
        </member>
        <member name="T:Caliburn.Controls.Transitions.ClothTransition">
            <summary>
            A cloth curtain transition.
            </summary>
        </member>
        <member name="T:Caliburn.Configuration.ContainerConfiguration">
            <summary>
            A  container based configuration.
            </summary>
        </member>
        <member name="T:Caliburn.Configuration.IConfiguration">
            <summary>
            An interface that represents Caliburn configuration information.
            </summary>
        </member>
        <member name="M:Caliburn.Configuration.IConfiguration.Prepare">
            <summary>
            Prepares this configuration for reading.
            </summary>
        </member>
        <member name="M:Caliburn.Configuration.IConfiguration.CreateContainer">
            <summary>
            Creates the dependency injection container.
            </summary>
            <returns>The container.</returns>
        </member>
        <member name="M:Caliburn.Configuration.IConfiguration.GetElementDefaults">
            <summary>
            Gets the element defaults.
            </summary>
            <returns>The defaults.</returns>
        </member>
        <member name="M:Caliburn.Configuration.ContainerConfiguration.#ctor(Caliburn.Services.IContainer)">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.Configuration.ContainerConfiguration"/> class.
            </summary>
            <param name="container">The container.</param>
        </member>
        <member name="M:Caliburn.Configuration.ContainerConfiguration.Prepare">
            <summary>
            Prepares this configuration for reading.
            </summary>
        </member>
        <member name="M:Caliburn.Configuration.ContainerConfiguration.CreateContainer">
            <summary>
            Creates the dependency injection container.
            </summary>
            <returns>The container.</returns>
        </member>
        <member name="M:Caliburn.Configuration.ContainerConfiguration.GetElementDefaults">
            <summary>
            Gets the element defaults.
            </summary>
            <returns>The defaults.</returns>
        </member>
        <member name="T:Caliburn.Metadata.PresenterInfo">
            <summary>
            Represents metadata for a particular presenter type.
            </summary>
        </member>
        <member name="M:Caliburn.Metadata.PresenterInfo.FindAction(System.String)">
            <summary>
            Finds an action by name.
            </summary>
            <param name="action">The action.</param>
            <returns></returns>
        </member>
        <member name="M:Caliburn.Metadata.PresenterInfo.Create(System.Type)">
            <summary>
            Creates presenter metadata based on the specified type.
            </summary>
            <param name="presenterType">Type of the presenter.</param>
            <returns>The metadata.</returns>
        </member>
        <member name="P:Caliburn.Metadata.PresenterInfo.Actions">
            <summary>
            Gets actions available on the presenter.
            </summary>
            <value>The actions.</value>
        </member>
        <member name="P:Caliburn.Metadata.PresenterInfo.Type">
            <summary>
            Gets the type of the presenter.
            </summary>
            <value>The type.</value>
        </member>
        <member name="T:Caliburn.CaliburnException">
            <summary>
            The general exception thrown by the Caliburn framework.
            </summary>
        </member>
        <member name="M:Caliburn.CaliburnException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.CaliburnException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info"/> parameter is null. </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult"/> is zero (0). </exception>
        </member>
        <member name="M:Caliburn.CaliburnException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.CaliburnException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:Caliburn.CaliburnException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.CaliburnException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Caliburn.CaliburnException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.CaliburnException"/> class.
            </summary>
        </member>
        <member name="T:Caliburn.MarkupExtensions.ResolveExtension">
            <summary>
            A Markup Extension that enables type resolution through the DI container in XAML.
            </summary>
        </member>
        <member name="M:Caliburn.MarkupExtensions.ResolveExtension.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.MarkupExtensions.ResolveExtension"/> class.
            </summary>
        </member>
        <member name="M:Caliburn.MarkupExtensions.ResolveExtension.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.MarkupExtensions.ResolveExtension"/> class.
            </summary>
            <param name="type">The type.</param>
        </member>
        <member name="M:Caliburn.MarkupExtensions.ResolveExtension.ProvideValue(System.IServiceProvider)">
            <summary>
            When implemented in a derived class, returns an object that is set as the value of the target property for this markup extension.
            </summary>
            <param name="serviceProvider">Object that can provide services for the markup extension.</param>
            <returns>
            The object value to set on the property where the extension is applied.
            </returns>
        </member>
        <member name="P:Caliburn.MarkupExtensions.ResolveExtension.Type">
            <summary>
            Gets or sets the type.
            </summary>
            <value>The type.</value>
        </member>
        <member name="P:Caliburn.MarkupExtensions.ResolveExtension.Key">
            <summary>
            Gets or sets the key.
            </summary>
            <value>The key.</value>
        </member>
        <member name="T:Caliburn.Events.Brokering.Subscription">
            <summary>
            Represents a weakly referenced subscription to an event.
            </summary>
        </member>
        <member name="M:Caliburn.Events.Brokering.Subscription.#ctor(System.Object,System.Reflection.MethodInfo,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.Events.Brokering.Subscription"/> class.
            </summary>
            <param name="target">The target.</param>
            <param name="methodInfo">The method info.</param>
            <param name="isAsync"><c>true</c> to deliver asynchronously.</param>
        </member>
        <member name="M:Caliburn.Events.Brokering.Subscription.TryToDeliver(System.Boolean,System.Object[])">
            <summary>
            Tries to deliver.
            </summary>
            <param name="publicationIsAsync">if set to <c>true</c> the event is being published asynchronously.</param>
            <param name="args">The args.</param>
            <returns><c>false</c> if the event reference has expired, <c>true</c> otherwise.</returns>
        </member>
        <member name="T:Caliburn.Events.Brokering.Publication">
            <summary>
            Represents a published event.
            </summary>
        </member>
        <member name="M:Caliburn.Events.Brokering.Publication.#ctor(System.String,System.Windows.RoutingStrategy,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.Events.Brokering.Publication"/> class.
            </summary>
            <param name="eventName">Name of the event.</param>
            <param name="strategy">The strategy.</param>
            <param name="isAsync">if set to <c>true</c> is asynchronous.</param>
        </member>
        <member name="M:Caliburn.Events.Brokering.Publication.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.Events.Brokering.Publication"/> class.
            </summary>
            <param name="eventName">Name of the event.</param>
        </member>
        <member name="P:Caliburn.Events.Brokering.Publication.Strategy">
            <summary>
            Gets the strategy.
            </summary>
            <value>The strategy.</value>
        </member>
        <member name="P:Caliburn.Events.Brokering.Publication.EventName">
            <summary>
            Gets the name of the event.
            </summary>
            <value>The name of the event.</value>
        </member>
        <member name="P:Caliburn.Events.Brokering.Publication.IsAsync">
            <summary>
            Gets a value indicating whether the publication is async.
            </summary>
            <value><c>true</c> if is asynchronous; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Caliburn.Modules.ModuleRepository">
            <summary>
            An implementation of <see cref="T:Caliburn.Modules.IModuleRepository"/>.
            </summary>
        </member>
        <member name="M:Caliburn.Modules.ModuleRepository.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Caliburn.Modules.ModuleRepository.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Caliburn.Modules.ModuleRepository.Add(Caliburn.Modules.IModuleController)">
            <summary>
            Adds the specified module.
            </summary>
            <param name="module">The module.</param>
        </member>
        <member name="M:Caliburn.Modules.ModuleRepository.GetByName(System.String)">
            <summary>
            Gets the <see cref="T:Caliburn.Modules.IModuleController"/> for tne named module.
            </summary>
            <param name="name">The name.</param>
            <returns>The controller for the named module.</returns>
        </member>
        <member name="M:Caliburn.Modules.ModuleRepository.Initialize">
            <summary>
            Initializes all the modules.
            </summary>
        </member>
        <member name="M:Caliburn.Modules.ModuleRepository.Shutdown">
            <summary>
            Shuts down all the modules.
            </summary>
        </member>
        <member name="P:Caliburn.Modules.ModuleRepository.Count">
            <summary>
            Gets the count.
            </summary>
            <value>The count.</value>
        </member>
        <member name="T:Caliburn.Modules.ModuleDescription">
            <summary>
            An implementation of <see cref="T:Caliburn.Modules.IModuleDescription"/>.
            </summary>
        </member>
        <member name="T:Caliburn.Modules.IModuleDescription">
            <summary>
            A description of a module.
            </summary>
        </member>
        <member name="M:Caliburn.Modules.IModuleDescription.GetAssembly">
            <summary>
            Gets the assembly associated with this module.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Caliburn.Modules.IModuleDescription.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:Caliburn.Modules.IModuleDescription.Version">
            <summary>
            Gets or sets the version.
            </summary>
            <value>The version.</value>
        </member>
        <member name="P:Caliburn.Modules.IModuleDescription.IsLazy">
            <summary>
            Gets a value indicating whether the module loading is lazy.
            </summary>
            <value><c>true</c> if this loading is lazy; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Caliburn.Modules.IModuleDescription.LoadPriority">
            <summary>
            Gets or sets the load priority.
            </summary>
            <value>The load priority.</value>
        </member>
        <member name="P:Caliburn.Modules.IModuleDescription.Isolation">
            <summary>
            Gets the isolation.
            </summary>
            <value>The isolation.</value>
        </member>
        <member name="P:Caliburn.Modules.IModuleDescription.ExtensionCount">
            <summary>
            Gets the extension count.
            </summary>
            <value>The extension count.</value>
        </member>
        <member name="M:Caliburn.Modules.ModuleDescription.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.Modules.ModuleDescription"/> class.
            </summary>
            <param name="assemblyPath">The assembly path.</param>
        </member>
        <member name="M:Caliburn.Modules.ModuleDescription.GetAssembly">
            <summary>
            Gets the assembly associated with this module.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Caliburn.Modules.ModuleDescription.AddExtension(Caliburn.Modules.ExtensionDescription)">
            <summary>
            Adds the extension.
            </summary>
            <param name="description">The description.</param>
        </member>
        <member name="M:Caliburn.Modules.ModuleDescription.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Caliburn.Modules.ModuleDescription.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Caliburn.Modules.ModuleDescription.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="P:Caliburn.Modules.ModuleDescription.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:Caliburn.Modules.ModuleDescription.Version">
            <summary>
            Gets or sets the version.
            </summary>
            <value>The version.</value>
        </member>
        <member name="P:Caliburn.Modules.ModuleDescription.IsLazy">
            <summary>
            Gets a value indicating whether the module loading is lazy.
            </summary>
            <value><c>true</c> if this loading is lazy; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Caliburn.Modules.ModuleDescription.LoadPriority">
            <summary>
            Gets or sets the load priority.
            </summary>
            <value>The load priority.</value>
        </member>
        <member name="P:Caliburn.Modules.ModuleDescription.Isolation">
            <summary>
            Gets the isolation.
            </summary>
            <value>The isolation.</value>
        </member>
        <member name="P:Caliburn.Modules.ModuleDescription.ExtensionCount">
            <summary>
            Gets the extension count.
            </summary>
            <value>The extension count.</value>
        </member>
        <member name="T:Caliburn.Controls.Transitions.RotateDirection">
            <summary>
            Rotation direction.
            </summary>
        </member>
        <member name="F:Caliburn.Controls.Transitions.RotateDirection.Up">
            <summary>
            Up
            </summary>
        </member>
        <member name="F:Caliburn.Controls.Transitions.RotateDirection.Down">
            <summary>
            Down
            </summary>
        </member>
        <member name="F:Caliburn.Controls.Transitions.RotateDirection.Left">
            <summary>
            Left
            </summary>
        </member>
        <member name="F:Caliburn.Controls.Transitions.RotateDirection.Right">
            <summary>
            Right
            </summary>
        </member>
        <member name="T:Caliburn.Controls.Transitions.RotateTransition">
            <summary>
            A rotate transition.
            </summary>
        </member>
        <member name="F:Caliburn.Controls.Transitions.RotateTransition.AngleProperty">
            <summary>
            A dependency property representing Angle.
            </summary>
        </member>
        <member name="F:Caliburn.Controls.Transitions.RotateTransition.ContainedProperty">
            <summary>
            A dependency property representing Contained.
            </summary>
        </member>
        <member name="F:Caliburn.Controls.Transitions.RotateTransition.DirectionProperty">
            <summary>
            A dependency property representing Direction.
            </summary>
        </member>
        <member name="F:Caliburn.Controls.Transitions.RotateTransition.DurationProperty">
            <summary>
            A dependency property representing Duration.
            </summary>
        </member>
        <member name="P:Caliburn.Controls.Transitions.RotateTransition.Duration">
            <summary>
            Gets or sets the duration.
            </summary>
            <value>The duration.</value>
        </member>
        <member name="P:Caliburn.Controls.Transitions.RotateTransition.Angle">
            <summary>
            Gets or sets the angle.
            </summary>
            <value>The angle.</value>
        </member>
        <member name="P:Caliburn.Controls.Transitions.RotateTransition.Direction">
            <summary>
            Gets or sets the direction.
            </summary>
            <value>The direction.</value>
        </member>
        <member name="P:Caliburn.Controls.Transitions.RotateTransition.Contained">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Caliburn.Controls.Transitions.RotateTransition"/> is contained.
            </summary>
            <value><c>true</c> if contained; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Caliburn.Composition.Proxies.InvalidProxy">
            <summary>
            Represents a composite proxy that is for an unsopported view type.
            </summary>
        </member>
        <member name="M:Caliburn.Composition.Proxies.InvalidProxy.SetVisiblity(System.Windows.Visibility)">
            <summary>
            Sets the visiblity.
            </summary>
            <param name="visibility">The visibility.</param>
        </member>
        <member name="M:Caliburn.Composition.Proxies.InvalidProxy.Add(System.Object)">
            <summary>
            Adds the specified element.
            </summary>
            <param name="element">The element.</param>
        </member>
        <member name="M:Caliburn.Composition.Proxies.InvalidProxy.Insert(System.Int32,System.Object)">
            <summary>
            Inserts the specified index.
            </summary>
            <param name="index">The index.</param>
            <param name="element">The element.</param>
        </member>
        <member name="M:Caliburn.Composition.Proxies.InvalidProxy.Remove(System.Object)">
            <summary>
            Removes the specified element.
            </summary>
            <param name="element">The element.</param>
        </member>
        <member name="M:Caliburn.Composition.Proxies.InvalidProxy.Show(System.Object)">
            <summary>
            Shows the specified element.
            </summary>
            <param name="element">The element.</param>
        </member>
        <member name="P:Caliburn.Composition.Proxies.InvalidProxy.Target">
            <summary>
            Gets or sets the actual target UI.
            </summary>
            <value>The target.</value>
        </member>
        <member name="P:Caliburn.Composition.Proxies.InvalidProxy.ComponentCount">
            <summary>
            Gets the component count.
            </summary>
            <value>The component count.</value>
        </member>
        <member name="T:Caliburn.Composition.Proxies.ContentControlProxy">
            <summary>
            A composite proxy capable of representing inheritors of <see cref="T:System.Windows.Controls.ContentControl"/>.
            </summary>
        </member>
        <member name="M:Caliburn.Composition.Proxies.ContentControlProxy.SetVisiblity(System.Windows.Visibility)">
            <summary>
            Sets the visiblity.
            </summary>
            <param name="visibility">The visibility.</param>
        </member>
        <member name="M:Caliburn.Composition.Proxies.ContentControlProxy.Add(System.Object)">
            <summary>
            Adds the specified element.
            </summary>
            <param name="element">The element.</param>
        </member>
        <member name="M:Caliburn.Composition.Proxies.ContentControlProxy.Insert(System.Int32,System.Object)">
            <summary>
            Inserts the specified index.
            </summary>
            <param name="index">The index.</param>
            <param name="element">The element.</param>
        </member>
        <member name="M:Caliburn.Composition.Proxies.ContentControlProxy.Remove(System.Object)">
            <summary>
            Removes the specified element.
            </summary>
            <param name="element">The element.</param>
        </member>
        <member name="M:Caliburn.Composition.Proxies.ContentControlProxy.Show(System.Object)">
            <summary>
            Shows the specified element.
            </summary>
            <param name="element">The element.</param>
        </member>
        <member name="P:Caliburn.Composition.Proxies.ContentControlProxy.Target">
            <summary>
            Gets or sets the actual target UI.
            </summary>
            <value>The target.</value>
        </member>
        <member name="P:Caliburn.Composition.Proxies.ContentControlProxy.ComponentCount">
            <summary>
            Gets the component count.
            </summary>
            <value>The component count.</value>
        </member>
        <member name="T:Caliburn.Views.View">
            <summary>
            Attached properties related to Views.
            </summary>
        </member>
        <member name="F:Caliburn.Views.View.MessagesProperty">
            <summary>
            An attached property representing the messages that a View element can send.
            </summary>
        </member>
        <member name="M:Caliburn.Views.View.SetMessages(System.Windows.DependencyObject,System.Object)">
            <summary>
            Sets the messages.
            </summary>
            <param name="dependencyObject">The dependency object.</param>
            <param name="value">The value.</param>
            <remarks>This method exists solely for designer support.</remarks>
        </member>
        <member name="M:Caliburn.Views.View.GetMessages(System.Windows.DependencyObject)">
            <summary>
            Gets the messages.
            </summary>
            <param name="dependencyObject">The dependency object.</param>
            <returns></returns>
            <remarks>This method exists solely for designer support.</remarks>
        </member>
        <member name="T:Caliburn.Testability.TestConfiguration">
            <summary>
            A configuration consisting of fakes and stubs.
            </summary>
        </member>
        <member name="M:Caliburn.Testability.TestConfiguration.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.Testability.TestConfiguration"/> class.
            </summary>
        </member>
        <member name="M:Caliburn.Testability.TestConfiguration.Prepare">
            <summary>
            Prepares this configuration for reading.
            </summary>
        </member>
        <member name="M:Caliburn.Testability.TestConfiguration.CreateContainer">
            <summary>
            Creates the dependency injection container.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Caliburn.Testability.TestConfiguration.GetElementDefaults">
            <summary>
            Gets the element defaults.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Caliburn.Testability.TestConfiguration.Container">
            <summary>
            Gets or sets the container.
            </summary>
            <value>The container.</value>
        </member>
        <member name="P:Caliburn.Testability.TestConfiguration.ElementDefaults">
            <summary>
            Gets or sets the element defaults.
            </summary>
            <value>The element defaults.</value>
        </member>
        <member name="P:Caliburn.Testability.TestConfiguration.EventBroker">
            <summary>
            Gets or sets the event broker.
            </summary>
            <value>The event broker.</value>
        </member>
        <member name="P:Caliburn.Testability.TestConfiguration.EventAggregator">
            <summary>
            Gets or sets the event aggregator.
            </summary>
            <value>The event aggregator.</value>
        </member>
        <member name="P:Caliburn.Testability.TestConfiguration.PlatformCapabilities">
            <summary>
            Gets or sets the platform capabilities.
            </summary>
            <value>The platform capabilities.</value>
        </member>
        <member name="P:Caliburn.Testability.TestConfiguration.PresenterManager">
            <summary>
            Gets or sets the presenter manager.
            </summary>
            <value>The presenter manager.</value>
        </member>
        <member name="P:Caliburn.Testability.TestConfiguration.ViewManager">
            <summary>
            Gets or sets the view manager.
            </summary>
            <value>The view manager.</value>
        </member>
        <member name="P:Caliburn.Testability.TestConfiguration.CompositionManager">
            <summary>
            Gets or sets the composite manager.
            </summary>
            <value>The composite manager.</value>
        </member>
        <member name="P:Caliburn.Testability.TestConfiguration.StateManager">
            <summary>
            Gets or sets the state of the shell.
            </summary>
            <value>The state of the shell.</value>
        </member>
        <member name="M:Caliburn.Testability.StubEventAggregator.AddListener(System.Object)">
            <summary>
            Registers a class as a listener for events.
            </summary>
            <param name="listener">The listener.</param>
        </member>
        <member name="M:Caliburn.Testability.StubEventAggregator.RemoveListener(System.Object)">
            <summary>
            Removes a class from the lists of event listeners.
            </summary>
            <param name="listener">The listener.</param>
        </member>
        <member name="M:Caliburn.Testability.StubEventAggregator.Send``1(``0,System.Boolean)">
            <summary>
            Sends the specified message to registered listeners.
            </summary>
            <typeparam name="T">The message type.</typeparam>
            <param name="message">The message.</param>
            <param name="deliverAsynchronously">if set to <c>true</c> the message will be delivered asynchronously</param>
        </member>
        <member name="T:Caliburn.Testability.FakeContainer">
            <summary>
            A faked implementation of <see cref="T:Caliburn.Services.IContainer"/>.
            </summary>
        </member>
        <member name="M:Caliburn.Testability.FakeContainer.Register(System.Type,System.Type)">
            <summary>
            Registers the specified service type.
            </summary>
            <param name="serviceType">Type of the service.</param>
            <param name="classType">Type of the class.</param>
        </member>
        <member name="M:Caliburn.Testability.FakeContainer.Register(System.Type,System.Object)">
            <summary>
            Registers the specified service type.
            </summary>
            <param name="serviceType">Type of the service.</param>
            <param name="instance">The instance.</param>
        </member>
        <member name="M:Caliburn.Testability.FakeContainer.Resolve(System.Type)">
            <summary>
            Resolves the specified type.
            </summary>
            <param name="type">The type.</param>
            <returns>
            A configured instance of the resolved type.
            </returns>
        </member>
        <member name="M:Caliburn.Testability.FakeContainer.Resolve(System.String)">
            <summary>
            Resolves the specified key.
            </summary>
            <param name="key">The key.</param>
            <returns>
            A configured instance of the resolved key.
            </returns>
        </member>
        <member name="M:Caliburn.Testability.FakeContainer.Resolve(System.Type,System.String)">
            <summary>
            Resolves the specified service type by key.
            </summary>
            <param name="serviceType">Type of the service.</param>
            <param name="key">The key.</param>
            <returns>
            A configured instance of the resolved type.
            </returns>
        </member>
        <member name="M:Caliburn.Testability.FakeContainer.LoadFrom(System.Reflection.Assembly)">
            <summary>
            Allows the container an opportunity to register types in an assembly.
            </summary>
            <param name="assembly">The assembly.</param>
        </member>
        <member name="M:Caliburn.Testability.FakeContainer.CreateChildContainer">
            <summary>
            Creates a child container.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Caliburn.StateManagement.StateEntry">
            <summary>
            A class that an <see cref="T:Caliburn.StateManagement.IStateSerializer"/> can serialize.
            </summary>
        </member>
        <member name="M:Caliburn.StateManagement.StateEntry.GetSchema">
            <summary>
            This method is reserved and should not be used. When implementing the IXmlSerializable interface, you should return null (Nothing in Visual Basic) from this method, and instead, if specifying a custom schema is required, apply the <see cref="T:System.Xml.Serialization.XmlSchemaProviderAttribute"/> to the class.
            </summary>
            <returns>
            An <see cref="T:System.Xml.Schema.XmlSchema"/> that describes the XML representation of the object that is produced by the <see cref="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)"/> method and consumed by the <see cref="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)"/> method.
            </returns>
        </member>
        <member name="M:Caliburn.StateManagement.StateEntry.ReadXml(System.Xml.XmlReader)">
            <summary>
            Generates an object from its XML representation.
            </summary>
            <param name="reader">The <see cref="T:System.Xml.XmlReader"/> stream from which the object is deserialized.</param>
        </member>
        <member name="M:Caliburn.StateManagement.StateEntry.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts an object into its XML representation.
            </summary>
            <param name="writer">The <see cref="T:System.Xml.XmlWriter"/> stream to which the object is serialized.</param>
        </member>
        <member name="P:Caliburn.StateManagement.StateEntry.Key">
            <summary>
            Gets or sets the key of the entry.
            </summary>
            <value>The key.</value>
        </member>
        <member name="P:Caliburn.StateManagement.StateEntry.Parent">
            <summary>
            Gets or sets the parent.
            </summary>
            <value>The parent.</value>
        </member>
        <member name="T:Caliburn.Messaging.ActionMessageSender">
            <summary>
            A class capable of sending an <see cref="T:Caliburn.Messaging.ActionMessage"/>.
            </summary>
        </member>
        <member name="M:Caliburn.Messaging.ActionMessageSender.#ctor(System.Windows.DependencyObject,Caliburn.Messaging.ActionMessage)">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.Messaging.ActionMessageSender"/> class.
            </summary>
            <param name="source">The source of the message.</param>
            <param name="message">The message.</param>
        </member>
        <member name="M:Caliburn.Messaging.ActionMessageSender.Send">
            <summary>
            Sends the message.
            </summary>
        </member>
        <member name="T:Caliburn.Events.Brokering.EventMessageSender">
            <summary>
            A class capable of sending an <see cref="T:Caliburn.Events.Brokering.EventMessage"/>.
            </summary>
        </member>
        <member name="M:Caliburn.Events.Brokering.EventMessageSender.#ctor(System.Windows.DependencyObject,Caliburn.Events.Brokering.EventMessage)">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.Events.Brokering.EventMessageSender"/> class.
            </summary>
            <param name="source">The source of the message.</param>
            <param name="eventMessage">The event message to send.</param>
        </member>
        <member name="M:Caliburn.Events.Brokering.EventMessageSender.Send">
            <summary>
            Sends the message.
            </summary>
        </member>
        <member name="T:Caliburn.MemoryManagement.WeakNullReference`1">
            <summary>
            Provides a weak reference to a null target object, which, unlike
            other weak references, is always considered to be alive. This
            facilitates handling null dictionary values, which are perfectly
            legal.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:Caliburn.MemoryManagement.WeakReference`1">
            <summary>
            Adds strong typing to WeakReference.Target using generics. Also,
            the WireEvent factory method is used in place of a constructor
            to handle the case where target is null, but we want the
            reference to still appear to be alive.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Caliburn.MemoryManagement.WeakReference`1.Create(`0)">
            <summary>
            Creates a weak reference for the specified target.
            </summary>
            <param name="target">The target.</param>
            <returns></returns>
        </member>
        <member name="P:Caliburn.MemoryManagement.WeakReference`1.Target">
            <summary>
            Gets or sets the object (the target) referenced by the current <see cref="T:System.WeakReference"/> object.
            </summary>
            <value></value>
            <returns>null if the object referenced by the current <see cref="T:System.WeakReference"/> object has been garbage collected; otherwise, a reference to the object referenced by the current <see cref="T:System.WeakReference"/> object.</returns>
            <exception cref="T:System.InvalidOperationException">The reference to the target object is invalid. This exception can be thrown while setting this property if the value is a null reference or if the object has been finalized during the set operation.</exception>
        </member>
        <member name="F:Caliburn.MemoryManagement.WeakNullReference`1.Singleton">
            <summary>
            The singleton instance.
            </summary>
        </member>
        <member name="P:Caliburn.MemoryManagement.WeakNullReference`1.IsAlive">
            <summary>
            Gets an indication whether the object referenced by the current <see cref="T:System.WeakReference"/> object has been garbage collected.
            </summary>
            <value></value>
            <returns>true if the object referenced by the current <see cref="T:System.WeakReference"/> object has not been garbage collected and is still accessible; otherwise, false.</returns>
        </member>
        <member name="T:Caliburn.Events.Brokering.SubscribeAttribute">
            <summary>
            Represents metadata supporting declarative event subscription.
            </summary>
        </member>
        <member name="M:Caliburn.Events.Brokering.SubscribeAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.Events.Brokering.SubscribeAttribute"/> class.
            </summary>
            <param name="eventNodeName">Name of the event node.</param>
        </member>
        <member name="P:Caliburn.Events.Brokering.SubscribeAttribute.EventNodeName">
            <summary>
            Gets the name of the event node.
            </summary>
            <value>The name of the event node.</value>
        </member>
        <member name="P:Caliburn.Events.Brokering.SubscribeAttribute.IsAsync">
            <summary>
            Gets or sets a value indicating whether the subscriber should be called asynchronously.
            </summary>
            <value><c>true</c> if is asynchronous; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Caliburn.Presenters.PresenterBase">
            <summary>
            A base class for presenters.
            </summary>
        </member>
        <member name="T:Caliburn.Presenters.IPresenter">
            <summary>
            Implemented by presenters.
            </summary>
        </member>
        <member name="P:Caliburn.Presenters.IPresenter.CurrentView">
            <summary>
            Gets or sets the current view.
            </summary>
            <value>The current view.</value>
        </member>
        <member name="M:Caliburn.Presenters.PresenterBase.ChangeView(System.String)">
            <summary>
            Changes the view.
            </summary>
            <param name="viewKey">The view key.</param>
        </member>
        <member name="M:Caliburn.Presenters.PresenterBase.ChangeView(System.Type)">
            <summary>
            Changes the view.
            </summary>
            <param name="viewType">Type of the view.</param>
        </member>
        <member name="P:Caliburn.Presenters.PresenterBase.CurrentView">
            <summary>
            Gets or sets the current view.
            </summary>
            <value>The current view.</value>
        </member>
        <member name="E:Caliburn.Presenters.PresenterBase.PropertyChanged">
            <summary>
            Occurs when a property value changes.
            </summary>
        </member>
        <member name="T:Caliburn.Modules.ModuleAttribute">
            <summary>
            Used to add metadata to eager loaded modules.
            </summary>
        </member>
        <member name="P:Caliburn.Modules.ModuleAttribute.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:Caliburn.Modules.ModuleAttribute.Version">
            <summary>
            Gets or sets the version.
            </summary>
            <value>The version.</value>
        </member>
        <member name="P:Caliburn.Modules.ModuleAttribute.LoadPriority">
            <summary>
            Gets or sets the load priority.
            </summary>
            <value>The load priority.</value>
        </member>
        <member name="T:Caliburn.StateManagement.IStateSerializer">
            <summary>
            An service capable of serializing application state.
            </summary>
        </member>
        <member name="M:Caliburn.StateManagement.IStateSerializer.Serialize(Caliburn.StateManagement.ContainerEntry)">
            <summary>
            Serializes the specified state.
            </summary>
            <param name="state">The state.</param>
        </member>
        <member name="M:Caliburn.StateManagement.IStateSerializer.Deserialize">
            <summary>
            Deserializes the application state.
            </summary>
            <returns>The deserialized state.</returns>
        </member>
        <member name="T:Caliburn.MemoryManagement.WeakKeyReference`1">
            <summary>
            Provides a weak reference to an object of the given type to be used in
            a WeakDictionary along with the given comparer.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:Caliburn.MemoryManagement.WeakKeyReference`1.HashCode">
            <summary>
            The HashCode of the key.
            </summary>
        </member>
        <member name="M:Caliburn.MemoryManagement.WeakKeyReference`1.#ctor(`0,Caliburn.MemoryManagement.WeakKeyComparer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.MemoryManagement.WeakKeyReference`1"/> class.
            </summary>
            <param name="key">The key.</param>
            <param name="comparer">The comparer.</param>
        </member>
        <member name="T:Caliburn.Events.Brokering.IEventBroker">
            <summary>
            A service that enables loosely coupled events through <see cref="T:System.String"/>
            based event topics.
            </summary>
        </member>
        <member name="M:Caliburn.Events.Brokering.IEventBroker.Publish(System.Object,System.Reflection.EventInfo,Caliburn.Events.Brokering.Publication)">
            <summary>
            Publishes an event on the given instance according to publication details.
            </summary>
            <param name="instance">The instance.</param>
            <param name="actualEvent">The actual event.</param>
            <param name="publication">The publication.</param>
        </member>
        <member name="M:Caliburn.Events.Brokering.IEventBroker.Subscribe(System.String,Caliburn.Events.Brokering.Subscription)">
            <summary>
            Creates a subscription to the given event name.
            </summary>
            <param name="publishedEventName">Name of the published event.</param>
            <param name="subscription">The subscription.</param>
        </member>
        <member name="M:Caliburn.Events.Brokering.IEventBroker.Raise(Caliburn.Events.Brokering.Publication,System.Object[])">
            <summary>
            Causes a publication to be distributed to its subscribers with the provided arguments.
            </summary>
            <param name="publication">The publication.</param>
            <param name="args">The args.</param>
        </member>
        <member name="M:Caliburn.Events.Brokering.IEventBroker.GetSubscribers(System.String,System.Windows.RoutingStrategy)">
            <summary>
            Gets the subscribers for a given event and strategy.
            </summary>
            <param name="eventNodeName">Name of the event node.</param>
            <param name="strategy">The strategy.</param>
            <returns>The list of subscribers.</returns>
        </member>
        <member name="M:Caliburn.Events.Brokering.IEventBroker.GetSubscribedMethods(System.Type)">
            <summary>
            Gets the subscribed methods on a type.
            </summary>
            <param name="type">The type.</param>
            <returns>A dictionary relating subscription metadata to method handlers.</returns>
        </member>
        <member name="M:Caliburn.Events.Brokering.IEventBroker.GetPublishedEvents(System.Type)">
            <summary>
            Gets the published events on a type.
            </summary>
            <param name="type">The type.</param>
            <returns>A dictionary relating publication metadata to events.</returns>
        </member>
        <member name="T:Caliburn.Presenters.Presenter">
            <summary>
            Attached properties related to presenters.
            </summary>
        </member>
        <member name="F:Caliburn.Presenters.Presenter.BindingProperty">
            <summary>
            An attached property that binds a presenter to a view.
            </summary>
        </member>
        <member name="M:Caliburn.Presenters.Presenter.SetBinding(System.Windows.DependencyObject,System.Object)">
            <summary>
            Sets the binding.
            </summary>
            <param name="dependencyObject">The dependency object.</param>
            <param name="value">The value.</param>
            <remarks>This method exists solely for designer support.</remarks>
        </member>
        <member name="M:Caliburn.Presenters.Presenter.GetBinding(System.Windows.DependencyObject)">
            <summary>
            Gets the binding.
            </summary>
            <param name="dependencyObject">The dependency object.</param>
            <returns></returns>
            <remarks>This method exists solely for designer support.</remarks>
        </member>
        <member name="T:Caliburn.Modules.EagerModuleController">
            <summary>
            An implementation of <see cref="T:Caliburn.Modules.IModuleController"/> that enable eager loading of modules.
            </summary>
        </member>
        <member name="M:Caliburn.Modules.EagerModuleController.#ctor(Caliburn.Modules.IModuleDescription)">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.Modules.EagerModuleController"/> class.
            </summary>
            <param name="description"></param>
        </member>
        <member name="M:Caliburn.Modules.EagerModuleController.Initialize">
            <summary>
            Loads this module.
            </summary>
        </member>
        <member name="M:Caliburn.Modules.EagerModuleController.Shutdown">
            <summary>
            Unloads this module.
            </summary>
        </member>
        <member name="P:Caliburn.Modules.EagerModuleController.Description">
            <summary>
            Gets the description of the module.
            </summary>
            <value>The description.</value>
        </member>
        <member name="E:Caliburn.Modules.EagerModuleController.PropertyChanged">
            <summary>
            Occurs when a property value changes.
            </summary>
        </member>
        <member name="T:Caliburn.Controls.Transitions.PageTransition">
            <summary>
            Represents a page turn transition.
            </summary>
        </member>
        <member name="T:Caliburn.Controls.PresenterHostSelector">
            <summary>
            Dynaimically creates a <see cref="T:Caliburn.Controls.PresenterHost"/> for a given presenter.
            </summary>
        </member>
        <member name="M:Caliburn.Controls.PresenterHostSelector.SelectTemplate(System.Object,System.Windows.DependencyObject)">
            <summary>
            When overridden in a derived class, returns a <see cref="T:System.Windows.DataTemplate"/> based on custom logic.
            </summary>
            <param name="item">The data object for which to select the template.</param>
            <param name="container">The data-bound object.</param>
            <returns>
            Returns a <see cref="T:System.Windows.DataTemplate"/> or null. The default value is null.
            </returns>
        </member>
        <member name="P:Caliburn.Controls.PresenterHostSelector.Transition">
            <summary>
            Gets or sets the transition.
            </summary>
            <value>The transition.</value>
        </member>
        <member name="P:Caliburn.Controls.PresenterHostSelector.TransitionSelector">
            <summary>
            Gets or sets the transition selector.
            </summary>
            <value>The transition selector.</value>
        </member>
        <member name="T:Caliburn.Actions.SynchronousActionExecutor">
            <summary>
            Executes an action synchronously.
            </summary>
        </member>
        <member name="M:Caliburn.Actions.SynchronousActionExecutor.#ctor(Caliburn.Metadata.ActionInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.Actions.SynchronousActionExecutor"/> class.
            </summary>
            <param name="actionInfo">The action info.</param>
        </member>
        <member name="M:Caliburn.Actions.SynchronousActionExecutor.Execute(System.Windows.DependencyObject,Caliburn.Messaging.ActionMessage,System.Object)">
            <summary>
            Executes the specified action message on the target from the source.
            </summary>
            <param name="messageSource">The message source.</param>
            <param name="message">The message.</param>
            <param name="target">The target.</param>
        </member>
        <member name="T:Caliburn.Testability.StubStateManager">
            <summary>
            A stub version of <see cref="T:Caliburn.Services.IStateManager"/>.
            </summary>
        </member>
        <member name="M:Caliburn.Testability.StubStateManager.SetValue``1(System.String,``0)">
            <summary>
            Sets a persistent value.
            </summary>
            <typeparam name="T">The type of value to store.</typeparam>
            <param name="key">The key to store the value with.</param>
            <param name="value">The stored value.</param>
        </member>
        <member name="M:Caliburn.Testability.StubStateManager.GetValue``1(System.String)">
            <summary>
            Gets a persistent value.
            </summary>
            <typeparam name="T">The type of value to return.</typeparam>
            <param name="key">The key that the value was stored with.</param>
            <returns>The stored value.</returns>
        </member>
        <member name="M:Caliburn.Testability.StubStateManager.Load">
            <summary>
            Loads the state.
            </summary>
        </member>
        <member name="M:Caliburn.Testability.StubStateManager.Save">
            <summary>
            Saves the state.
            </summary>
        </member>
        <member name="P:Caliburn.Testability.StubStateManager.IsLoaded">
            <summary>
            Gets a value indicating whether the state has been loaded from the persistence medium.
            </summary>
            <value><c>true</c> if te state is loaded; otherwise, <c>false</c>.</value>
        </member>
        <member name="E:Caliburn.Testability.StubStateManager.Loaded">
            <summary>
            Occurs after the state has been loaded from the persistence medium.
            </summary>
        </member>
        <member name="E:Caliburn.Testability.StubStateManager.Saving">
            <summary>
            Occurs before the state is about to be saved to the persistence medium.
            </summary>
        </member>
        <member name="T:Caliburn.StateManagement.Serializers.BinaryStateSerializer">
            <summary>
            A <see cref="T:Caliburn.StateManagement.Serializers.FormatterSerializer`1"/> that uses the <see cref="T:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter"/>.
            </summary>
        </member>
        <member name="T:Caliburn.StateManagement.Serializers.FormatterSerializer`1">
            <summary>
            Can use an <see cref="T:System.Runtime.Serialization.IFormatter"/> to serialize application state.
            </summary>
            <typeparam name="T">A type of <see cref="T:System.Runtime.Serialization.IFormatter"/>.</typeparam>
        </member>
        <member name="M:Caliburn.StateManagement.Serializers.FormatterSerializer`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.StateManagement.Serializers.FormatterSerializer`1"/> class.
            </summary>
        </member>
        <member name="M:Caliburn.StateManagement.Serializers.FormatterSerializer`1.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.StateManagement.Serializers.FormatterSerializer`1"/> class.
            </summary>
            <param name="fileName">Name of the file to persist to.</param>
        </member>
        <member name="M:Caliburn.StateManagement.Serializers.FormatterSerializer`1.Serialize(Caliburn.StateManagement.ContainerEntry)">
            <summary>
            Serializes the specified state.
            </summary>
            <param name="state">The state.</param>
        </member>
        <member name="M:Caliburn.StateManagement.Serializers.FormatterSerializer`1.Deserialize">
            <summary>
            Deserializes the application state.
            </summary>
            <returns>The deserialized state.</returns>
        </member>
        <member name="T:Caliburn.Events.Brokering.EventMessage">
            <summary>
            A message type for loosely coupled events.
            </summary>
        </member>
        <member name="M:Caliburn.Events.Brokering.EventMessage.Send(System.Windows.DependencyObject)">
            <summary>
            Sends the message from the specified source.
            </summary>
            <param name="source">The source.</param>
        </member>
        <member name="P:Caliburn.Events.Brokering.EventMessage.Publication">
            <summary>
            Gets or sets the publication that this message will raise.
            </summary>
            <value>The publication.</value>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Caliburn.MemoryManagement.WeakKeyComparer`1" -->
        <member name="M:Caliburn.MemoryManagement.WeakKeyComparer`1.GetHashCode(System.Object)">
            <summary>
            Returns a hash code for the specified object.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> for which a hash code is to be returned.</param>
            <returns>A hash code for the specified object.</returns>
            <exception cref="T:System.ArgumentNullException">The type of <paramref name="obj"/> is a reference type and <paramref name="obj"/> is null.</exception>
        </member>
        <member name="M:Caliburn.MemoryManagement.WeakKeyComparer`1.Equals(System.Object,System.Object)">
            <summary>
            Determines whether the specified objects are equal.
            </summary>
            <param name="x">The first object of type <paramref name="T"/> to compare.</param>
            <param name="y">The second object of type <paramref name="T"/> to compare.</param>
            <returns>
            true if the specified objects are equal; otherwise, false.
            </returns>
        </member>
        <member name="T:Caliburn.Modules.ModuleIsolation">
            <summary>
            Indicates the isolation level of a module.
            </summary>
        </member>
        <member name="F:Caliburn.Modules.ModuleIsolation.None">
            <summary>
            The module is loaded into the application's main AppDomain.
            </summary>
        </member>
        <member name="F:Caliburn.Modules.ModuleIsolation.Container">
            <summary>
            The module is loaded into the application's main AppDomain, but is given its own <see cref="T:Caliburn.Services.IContainer"/>.
            </summary>
        </member>
        <member name="T:Caliburn.Modules.LazyCommandExtension">
            <summary>
            A <see cref="T:System.Windows.Markup.MarkupExtension"/> for creating command to lazily loaded modules.
            </summary>
        </member>
        <member name="M:Caliburn.Modules.LazyCommandExtension.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.Modules.LazyCommandExtension"/> class.
            </summary>
            <param name="commandName">Name of the command.</param>
        </member>
        <member name="M:Caliburn.Modules.LazyCommandExtension.ProvideValue(System.IServiceProvider)">
            <summary>
            When implemented in a derived class, returns an object that is set as the value of the target property for this markup extension.
            </summary>
            <param name="serviceProvider">Object that can provide services for the markup extension.</param>
            <returns>
            The object value to set on the property where the extension is applied.
            </returns>
        </member>
        <member name="T:Caliburn.Events.GenericEventHandler`4">
            <summary>
            An implementation of <see cref="T:Caliburn.Events.IEventHandler"/>.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="K"></typeparam>
            <typeparam name="U"></typeparam>
            <typeparam name="V"></typeparam>
        </member>
        <member name="T:Caliburn.Events.IEventHandler">
            <summary>
            Represents a generic method of setting and invoking an event handler.
            </summary>
        </member>
        <member name="T:Caliburn.Execution.UnboundFunc`2">
            <summary>
            Represenents an unbound function.
            </summary>
            <typeparam name="TTarget">The type of the target.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
        </member>
        <member name="M:Caliburn.Execution.UnboundFunc`2.#ctor(System.Reflection.MethodInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.Execution.UnboundFunc`2"/> class.
            </summary>
            <param name="methodInfo">The method info.</param>
        </member>
        <member name="M:Caliburn.Execution.UnboundFunc`2.Execute(System.Object,System.Object[])">
            <summary>
            Executes the method on the specified instance with the specified parameters.
            </summary>
            <param name="instance">The instance.</param>
            <param name="parameters">The parameters.</param>
            <returns></returns>
        </member>
        <member name="M:Caliburn.Execution.UnboundFunc`2.AsyncExecute(System.Object,System.AsyncCallback,System.Object,System.Object[])">
            <summary>
            Asynchronously executes the method on the specified instance with the specified parameters.
            </summary>
            <param name="instance">The instance.</param>
            <param name="callback">The callback.</param>
            <param name="state">The state.</param>
            <param name="parameters">The parameters.</param>
        </member>
        <member name="T:Caliburn.Execution.UnboundFunc`3">
            <summary>
            Represenents an unbound function.
            </summary>
            <typeparam name="TTarget">The type of the target.</typeparam>
            <typeparam name="TParam1">The type of the param1.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
        </member>
        <member name="M:Caliburn.Execution.UnboundFunc`3.#ctor(System.Reflection.MethodInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.Execution.UnboundFunc`3"/> class.
            </summary>
            <param name="methodInfo">The method info.</param>
        </member>
        <member name="M:Caliburn.Execution.UnboundFunc`3.Execute(System.Object,System.Object[])">
            <summary>
            Executes the method on the specified instance with the specified parameters.
            </summary>
            <param name="instance">The instance.</param>
            <param name="parameters">The parameters.</param>
            <returns></returns>
        </member>
        <member name="M:Caliburn.Execution.UnboundFunc`3.AsyncExecute(System.Object,System.AsyncCallback,System.Object,System.Object[])">
            <summary>
            Asynchronously executes the method on the specified instance with the specified parameters.
            </summary>
            <param name="instance">The instance.</param>
            <param name="callback">The callback.</param>
            <param name="state">The state.</param>
            <param name="parameters">The parameters.</param>
        </member>
        <member name="T:Caliburn.Execution.UnboundFunc`4">
            <summary>
            Represenents an unbound function.
            </summary>
            <typeparam name="TTarget">The type of the target.</typeparam>
            <typeparam name="TParam1">The type of the param1.</typeparam>
            <typeparam name="TParam2">The type of the param2.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
        </member>
        <member name="M:Caliburn.Execution.UnboundFunc`4.#ctor(System.Reflection.MethodInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.Execution.UnboundFunc`4"/> class.
            </summary>
            <param name="methodInfo">The method info.</param>
        </member>
        <member name="M:Caliburn.Execution.UnboundFunc`4.Execute(System.Object,System.Object[])">
            <summary>
            Executes the method on the specified instance with the specified parameters.
            </summary>
            <param name="instance">The instance.</param>
            <param name="parameters">The parameters.</param>
            <returns></returns>
        </member>
        <member name="M:Caliburn.Execution.UnboundFunc`4.AsyncExecute(System.Object,System.AsyncCallback,System.Object,System.Object[])">
            <summary>
            Asynchronously executes the method on the specified instance with the specified parameters.
            </summary>
            <param name="instance">The instance.</param>
            <param name="callback">The callback.</param>
            <param name="state">The state.</param>
            <param name="parameters">The parameters.</param>
        </member>
        <member name="T:Caliburn.Execution.UnboundFunc`5">
            <summary>
            Represenents an unbound function.
            </summary>
            <typeparam name="TTarget">The type of the target.</typeparam>
            <typeparam name="TParam1">The type of the param1.</typeparam>
            <typeparam name="TParam2">The type of the param2.</typeparam>
            <typeparam name="TParam3">The type of the param3.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
        </member>
        <member name="M:Caliburn.Execution.UnboundFunc`5.#ctor(System.Reflection.MethodInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.Execution.UnboundFunc`5"/> class.
            </summary>
            <param name="methodInfo">The method info.</param>
        </member>
        <member name="M:Caliburn.Execution.UnboundFunc`5.Execute(System.Object,System.Object[])">
            <summary>
            Executes the method on the specified instance with the specified parameters.
            </summary>
            <param name="instance">The instance.</param>
            <param name="parameters">The parameters.</param>
            <returns></returns>
        </member>
        <member name="M:Caliburn.Execution.UnboundFunc`5.AsyncExecute(System.Object,System.AsyncCallback,System.Object,System.Object[])">
            <summary>
            Asynchronously executes the method on the specified instance with the specified parameters.
            </summary>
            <param name="instance">The instance.</param>
            <param name="callback">The callback.</param>
            <param name="state">The state.</param>
            <param name="parameters">The parameters.</param>
        </member>
        <member name="T:Caliburn.Execution.UnboundFunc`6">
            <summary>
            
            </summary>
            <typeparam name="TTarget">The type of the target.</typeparam>
            <typeparam name="TParam1">The type of the param1.</typeparam>
            <typeparam name="TParam2">The type of the param2.</typeparam>
            <typeparam name="TParam3">The type of the param3.</typeparam>
            <typeparam name="TParam4">The type of the param4.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
        </member>
        <member name="M:Caliburn.Execution.UnboundFunc`6.#ctor(System.Reflection.MethodInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.Execution.UnboundFunc`6"/> class.
            </summary>
            <param name="methodInfo">The method info.</param>
        </member>
        <member name="M:Caliburn.Execution.UnboundFunc`6.Execute(System.Object,System.Object[])">
            <summary>
            Executes the method on the specified instance with the specified parameters.
            </summary>
            <param name="instance">The instance.</param>
            <param name="parameters">The parameters.</param>
            <returns></returns>
        </member>
        <member name="M:Caliburn.Execution.UnboundFunc`6.AsyncExecute(System.Object,System.AsyncCallback,System.Object,System.Object[])">
            <summary>
            Asynchronously executes the method on the specified instance with the specified parameters.
            </summary>
            <param name="instance">The instance.</param>
            <param name="callback">The callback.</param>
            <param name="state">The state.</param>
            <param name="parameters">The parameters.</param>
        </member>
        <member name="T:Caliburn.PlatformCapabilities.MessageBoxImplementer">
            <summary>
            A standard windows implementation of <see cref="T:Caliburn.Services.IMessageBox"/>.
            </summary>
        </member>
        <member name="M:Caliburn.PlatformCapabilities.MessageBoxImplementer.Show(System.String)">
            <summary>
            Displays a message box that has a message and that returns a result.
            </summary>
            <param name="messageBoxText">The message box text.</param>
            <returns>
            A value that specifies which message box button is clicked by the user.
            </returns>
        </member>
        <member name="M:Caliburn.PlatformCapabilities.MessageBoxImplementer.Show(System.String,System.String)">
            <summary>
            Displays a message box that has a message and title bar caption; and that returns a result.c
            </summary>
            <param name="messageBoxText">The message box text.</param>
            <param name="caption">The caption.</param>
            <returns>
            A value that specifies which message box button is clicked by the user.
            </returns>
        </member>
        <member name="M:Caliburn.PlatformCapabilities.MessageBoxImplementer.Show(System.String,System.String,System.Windows.MessageBoxButton)">
            <summary>
            Displays a message box that has a message, title bar caption, and button; and that returns a result.
            </summary>
            <param name="messageBoxText">The message box text.</param>
            <param name="caption">The caption.</param>
            <param name="button">The button.</param>
            <returns>
            A value that specifies which message box button is clicked by the user.
            </returns>
        </member>
        <member name="M:Caliburn.PlatformCapabilities.MessageBoxImplementer.Show(System.String,System.String,System.Windows.MessageBoxButton,System.Windows.MessageBoxImage)">
            <summary>
            Displays a message box that has a message, title bar caption, button, and icon; and that returns a result..
            </summary>
            <param name="messageBoxText">The message box text.</param>
            <param name="caption">The caption.</param>
            <param name="button">The button.</param>
            <param name="icon">The icon.</param>
            <returns>
            A value that specifies which message box button is clicked by the user.
            </returns>
        </member>
        <member name="M:Caliburn.PlatformCapabilities.MessageBoxImplementer.Show(System.String,System.String,System.Windows.MessageBoxButton,System.Windows.MessageBoxImage,System.Windows.MessageBoxResult)">
            <summary>
            Displays a message box that has a message, title bar caption, button, and icon;
            and that accepts a default message box result and returns a result.
            </summary>
            <param name="messageBoxText">The message box text.</param>
            <param name="caption">The caption.</param>
            <param name="button">The button.</param>
            <param name="icon">The icon.</param>
            <param name="defaultResult">The default result.</param>
            <returns>
            A value that specifies which message box button is clicked by the user.
            </returns>
        </member>
        <member name="M:Caliburn.PlatformCapabilities.MessageBoxImplementer.Show(System.String,System.String,System.Windows.MessageBoxButton,System.Windows.MessageBoxImage,System.Windows.MessageBoxResult,System.Windows.MessageBoxOptions)">
            <summary>
            Displays a message box that has a message, title bar caption, button, and icon;
            and that accepts a default message box result, complies with the specified options, and returns a result.
            </summary>
            <param name="messageBoxText">The message box text.</param>
            <param name="caption">The caption.</param>
            <param name="button">The button.</param>
            <param name="icon">The icon.</param>
            <param name="defaultResult">The default result.</param>
            <param name="options">The options.</param>
            <returns>
            A value that specifies which message box button is clicked by the user.
            </returns>
        </member>
        <member name="T:Caliburn.Metadata.DefaultViewAttribute">
            <summary>
            Custom metadata used by a presenter to declare a default view.
            </summary>
        </member>
        <member name="M:Caliburn.Metadata.DefaultViewAttribute.CreateView(System.Type)">
            <summary>
            Create the view based on the specified Type and/or Key for the specified presenter type.
            </summary>
            <returns>An instance of the view.</returns>
        </member>
        <member name="P:Caliburn.Metadata.DefaultViewAttribute.Type">
            <summary>
            Gets or sets the type of the view.
            </summary>
            <value>The type.</value>
        </member>
        <member name="P:Caliburn.Metadata.DefaultViewAttribute.Key">
            <summary>
            Gets or sets the key of for the view.
            </summary>
            <value>The key.</value>
        </member>
        <member name="T:Caliburn.MarkupExtensions.RouteExtension">
            <summary>
            A Markup Extension that allows a Message to declare a RoutedEvent as its trigger.
            </summary>
        </member>
        <member name="M:Caliburn.MarkupExtensions.RouteExtension.#ctor(System.Windows.RoutedEvent)">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.MarkupExtensions.RouteExtension"/> class.
            </summary>
            <param name="routedEvent">The routed event.</param>
        </member>
        <member name="M:Caliburn.MarkupExtensions.RouteExtension.ProvideValue(System.IServiceProvider)">
            <summary>
            When implemented in a derived class, returns an object that is set as the value of the target property for this markup extension.
            </summary>
            <param name="serviceProvider">Object that can provide services for the markup extension.</param>
            <returns>
            The object value to set on the property where the extension is applied.
            </returns>
        </member>
        <member name="T:Caliburn.DI">
            <summary>
            A static gateway for accessing the configured dependency injection container.
            </summary>
        </member>
        <member name="M:Caliburn.DI.Resolve``1">
            <summary>
            Uses the DI container to resolve by type.
            </summary>
            <typeparam name="T">The type to resolve.</typeparam>
            <returns>The resolved type.</returns>
        </member>
        <member name="M:Caliburn.DI.Resolve``1(System.String)">
            <summary>
            Uses the DI container to resolve by type and key.
            </summary>
            <typeparam name="T">The type to resolve.</typeparam>
            <param name="key">The key.</param>
            <returns>The resolved type.</returns>
        </member>
        <member name="M:Caliburn.DI.SetContainerFor(System.Reflection.Assembly,Caliburn.Services.IContainer)">
            <summary>
            Sets the container that handles a given assembly.
            </summary>
            <param name="assembly">The assembly.</param>
            <param name="container">The container.</param>
        </member>
        <member name="M:Caliburn.DI.GetContainerFor(System.Reflection.Assembly)">
            <summary>
            Gets the container that handles the specified assembly.
            </summary>
            <param name="assembly">The assembly.</param>
            <returns></returns>
        </member>
        <member name="P:Caliburn.DI.Container">
            <summary>
            Gets the configured dependency injection container.
            </summary>
            <value>The container.</value>
        </member>
        <member name="T:Caliburn.Testability.StubViewManager">
            <summary>
            A stub implementation of <see cref="T:Caliburn.Services.IViewManager"/>.
            </summary>
        </member>
        <member name="M:Caliburn.Testability.StubViewManager.ConfigureMessageSource(System.Windows.DependencyObject,Caliburn.Messaging.MessageBase)">
            <summary>
            Configures the source view as a sender of the provided message.
            </summary>
            <param name="source">The source view.</param>
            <param name="message">The message.</param>
        </member>
        <member name="M:Caliburn.Testability.StubViewManager.RegisterDefaults(Caliburn.Metadata.ElementDefaults)">
            <summary>
            Registers default settings for an element.  Caliburn will fallback to these values
            when various information is not provided by the developer.
            </summary>
            <param name="defaults">The defaults.</param>
        </member>
        <member name="M:Caliburn.Testability.StubViewManager.GetDefaults(System.Type)">
            <summary>
            Gets the default settings for an element type.
            </summary>
            <param name="elementType">Type of the element.</param>
            <returns>The element type's default settings.</returns>
        </member>
        <member name="T:Caliburn.StateManagement.State">
            <summary>
            Attached properties related to state.
            </summary>
        </member>
        <member name="F:Caliburn.StateManagement.State.KeyProperty">
            <summary>
            An attached property that sets a dependency objects's state key.
            </summary>
        </member>
        <member name="M:Caliburn.StateManagement.State.SetKey(System.Windows.DependencyObject,System.String)">
            <summary>
            Sets the tracking key for a dependency object.
            </summary>
            <param name="d">The dependency object to track.</param>
            <param name="key">The tracking key.</param>
            <remarks>This method exists solely for designer support.</remarks>
        </member>
        <member name="M:Caliburn.StateManagement.State.GetKey(System.Windows.DependencyObject)">
            <summary>
            Gets the key.
            </summary>
            <param name="dependencyObject">The dependency object.</param>
            <returns></returns>
            <remarks>This method exists solely for designer support.</remarks>
        </member>
        <member name="M:Caliburn.StateManagement.State.Track(System.String,System.Windows.DependencyObject)">
            <summary>
            Begins tracking a target using the provided key.
            </summary>
            <param name="key">The key to track with.</param>
            <param name="target">The target to track.</param>
        </member>
        <member name="T:Caliburn.StateManagement.ContainerEntry">
            <summary>
            Represents a complex type.
            </summary>
        </member>
        <member name="M:Caliburn.StateManagement.ContainerEntry.ReadXml(System.Xml.XmlReader)">
            <summary>
            Generates an object from its XML representation.
            </summary>
            <param name="reader">The <see cref="T:System.Xml.XmlReader"/> stream from which the object is deserialized.</param>
        </member>
        <member name="M:Caliburn.StateManagement.ContainerEntry.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts an object into its XML representation.
            </summary>
            <param name="writer">The <see cref="T:System.Xml.XmlWriter"/> stream to which the object is serialized.</param>
        </member>
        <member name="P:Caliburn.StateManagement.ContainerEntry.Type">
            <summary>
            Gets or sets the type.
            </summary>
            <value>The type.</value>
        </member>
        <member name="P:Caliburn.StateManagement.ContainerEntry.Children">
            <summary>
            Gets or sets the children.
            </summary>
            <value>The children.</value>
        </member>
        <member name="T:Caliburn.Presenters.PresenterBase`1">
            <summary>
            A base class for presenters with a strongly typed view.
            </summary>
            <typeparam name="T">The view.</typeparam>
        </member>
        <member name="P:Caliburn.Presenters.PresenterBase`1.CurrentView">
            <summary>
            Gets or sets the current view.
            </summary>
            <value>The current view.</value>
        </member>
        <member name="T:Caliburn.Events.Brokering.EventCommand">
            <summary>
            A command capable of firing a loosely coupled event.
            </summary>
        </member>
        <member name="M:Caliburn.Events.Brokering.EventCommand.#ctor(Caliburn.Events.Brokering.Publication,System.Func{System.Object,System.Boolean})">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.Events.Brokering.EventCommand"/> class.
            </summary>
            <param name="publication">The publication.</param>
            <param name="canExecute">The can execute.</param>
        </member>
        <member name="M:Caliburn.Events.Brokering.EventCommand.#ctor(Caliburn.Events.Brokering.Publication)">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.Events.Brokering.EventCommand"/> class.
            </summary>
            <param name="publication">The publication.</param>
        </member>
        <member name="M:Caliburn.Events.Brokering.EventCommand.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.Events.Brokering.EventCommand"/> class.
            </summary>
            <param name="eventNodeName">Name of the event node.</param>
        </member>
        <member name="M:Caliburn.Events.Brokering.EventCommand.Execute(System.Object)">
            <summary>
            Defines the method to be called when the command is invoked.
            </summary>
            <param name="parameter">Data used by the command.  If the command does not require data to be passed, this object can be set to null.</param>
        </member>
        <member name="M:Caliburn.Events.Brokering.EventCommand.CanExecute(System.Object)">
            <summary>
            Defines the method that determines whether the command can execute in its current state.
            </summary>
            <param name="parameter">Data used by the command.  If the command does not require data to be passed, this object can be set to null.</param>
            <returns>
            true if this command can be executed; otherwise, false.
            </returns>
        </member>
        <member name="E:Caliburn.Events.Brokering.EventCommand.CanExecuteChanged">
            <summary>
            Occurs when changes occur that affect whether or not the command should execute.
            </summary>
        </member>
        <member name="T:Caliburn.Presenters.PresenterManager">
            <summary>
            A service that implements <see cref="T:Caliburn.Services.IPresenterManager"/> and manages various aspects of presenters such as binding and metadata.
            </summary>
        </member>
        <member name="M:Caliburn.Presenters.PresenterManager.AddBinding(System.Object,System.Windows.DependencyObject)">
            <summary>
            Binds a presenter to a view.
            </summary>
            <param name="presenter">The presenter.</param>
            <param name="target">The target view.</param>
        </member>
        <member name="M:Caliburn.Presenters.PresenterManager.RemoveBinding(System.Windows.DependencyObject)">
            <summary>
            Unbinds a presenter from a view.
            </summary>
            <param name="target">The target view.</param>
        </member>
        <member name="M:Caliburn.Presenters.PresenterManager.GetBinding(System.Windows.DependencyObject)">
            <summary>
            Determines the presenter that handles the view.
            </summary>
            <param name="target">The target view.</param>
            <returns>The binding.</returns>
        </member>
        <member name="M:Caliburn.Presenters.PresenterManager.GetInfo(System.Type)">
            <summary>
            Gets metadata about the presenter.
            </summary>
            <param name="presenterType">Type of the presenter.</param>
            <returns>The presenter metadata.</returns>
        </member>
        <member name="M:Caliburn.Presenters.PresenterManager.GetBoundViews(System.Object)">
            <summary>
            Returns all views that are bound to the presenter instance.
            </summary>
            <param name="presenter">The presenter instance.</param>
            <returns>A list of bound views.</returns>
        </member>
        <member name="T:Caliburn.StateManagement.Serializers.XmlStateSerializer">
            <summary>
            An <see cref="T:Caliburn.StateManagement.IStateSerializer"/> that serializes the state as Xml.
            </summary>
        </member>
        <member name="M:Caliburn.StateManagement.Serializers.XmlStateSerializer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.StateManagement.Serializers.XmlStateSerializer"/> class.
            </summary>
        </member>
        <member name="M:Caliburn.StateManagement.Serializers.XmlStateSerializer.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.StateManagement.Serializers.XmlStateSerializer"/> class.
            </summary>
            <param name="fileName">Name of the file.</param>
        </member>
        <member name="M:Caliburn.StateManagement.Serializers.XmlStateSerializer.Serialize(Caliburn.StateManagement.ContainerEntry)">
            <summary>
            Serializes the specified state.
            </summary>
            <param name="state">The state.</param>
        </member>
        <member name="M:Caliburn.StateManagement.Serializers.XmlStateSerializer.Deserialize">
            <summary>
            Deserializes the application state.
            </summary>
            <returns>The deserialized state.</returns>
        </member>
        <member name="T:Caliburn.Events.Brokering.EventBroker">
            <summary>
            An implementation of <see cref="T:Caliburn.Events.Brokering.IEventBroker"/> that enables loosely coupled events through
            <see cref="T:System.String"/> based event topics.
            </summary>
        </member>
        <member name="M:Caliburn.Events.Brokering.EventBroker.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.Events.Brokering.EventBroker"/> class.
            </summary>
        </member>
        <member name="M:Caliburn.Events.Brokering.EventBroker.Subscribe(System.String,Caliburn.Events.Brokering.Subscription)">
            <summary>
            Creates a subscription to the given event name.
            </summary>
            <param name="publishedEventName">Name of the published event.</param>
            <param name="subscription">The subscription.</param>
        </member>
        <member name="M:Caliburn.Events.Brokering.EventBroker.Publish(System.Object,System.Reflection.EventInfo,Caliburn.Events.Brokering.Publication)">
            <summary>
            Publishes an event on the given instance according to publication details.
            </summary>
            <param name="instance">The instance.</param>
            <param name="actualEvent">The actual event.</param>
            <param name="publication">The publication.</param>
        </member>
        <member name="M:Caliburn.Events.Brokering.EventBroker.Raise(Caliburn.Events.Brokering.Publication,System.Object[])">
            <summary>
            Causes a publication to be distributed to its subscribers with the provided arguments.
            </summary>
            <param name="publication">The publication.</param>
            <param name="args">The args.</param>
        </member>
        <member name="M:Caliburn.Events.Brokering.EventBroker.GetSubscribers(System.String,System.Windows.RoutingStrategy)">
            <summary>
            Gets the subscribers for a given event and strategy.
            </summary>
            <param name="eventNodeName">Name of the event node.</param>
            <param name="strategy">The strategy.</param>
            <returns>The list of subscribers.</returns>
        </member>
        <member name="M:Caliburn.Events.Brokering.EventBroker.GetSubscribedMethods(System.Type)">
            <summary>
            Gets the subscribed methods on a type.
            </summary>
            <param name="type">The type.</param>
            <returns>
            A dictionary relating subscription metadata to method handlers.
            </returns>
        </member>
        <member name="M:Caliburn.Events.Brokering.EventBroker.GetPublishedEvents(System.Type)">
            <summary>
            Gets the published events on a type.
            </summary>
            <param name="type">The type.</param>
            <returns>
            A dictionary relating publication metadata to events.
            </returns>
        </member>
        <member name="T:Caliburn.Events.BindableDTO`1">
            <summary>
            Allows easy creation of DTO's where all public properties automatically become dependency properties.
            </summary>
            <typeparam name="T">The type of the DTO.</typeparam>
        </member>
        <member name="M:Caliburn.Events.BindableDTO`1.SetValue(System.String,System.Object)">
            <summary>
            Sets the value.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Caliburn.Events.BindableDTO`1.Set(System.Object)">
            <summary>
            Sets the specified value for the currently scoped property.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Caliburn.Events.BindableDTO`1.GetValue``1(System.String)">
            <summary>
            Gets the value.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <returns>The value.</returns>
        </member>
        <member name="M:Caliburn.Events.BindableDTO`1.Get``1">
            <summary>
            Gets the value for the currently scoped property.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="T:Caliburn.Configuration.DefaultConfiguration">
            <summary>
            A default configuration for Caliburn.
            </summary>
        </member>
        <member name="F:Caliburn.Configuration.DefaultConfiguration.ElementDefaults">
            <summary>
            The default element settings.
            </summary>
        </member>
        <member name="M:Caliburn.Configuration.DefaultConfiguration.Prepare">
            <summary>
            Prepares this configuration for reading.
            </summary>
        </member>
        <member name="M:Caliburn.Configuration.DefaultConfiguration.CreateContainer">
            <summary>
            Creates the dependency injection container.
            </summary>
            <returns>The container.</returns>
        </member>
        <member name="M:Caliburn.Configuration.DefaultConfiguration.GetElementDefaults">
            <summary>
            Gets the element defaults.
            </summary>
            <returns>The defaults.</returns>
        </member>
        <member name="T:Caliburn.Views.ViewManager">
            <summary>
            The default view manager.
            </summary>
        </member>
        <member name="M:Caliburn.Views.ViewManager.RegisterDefaults(Caliburn.Metadata.ElementDefaults)">
            <summary>
            Registers default settings for an element.  Caliburn will fallback to these values
            when various information is not provided by the developer.
            </summary>
            <param name="defaults">The defaults.</param>
        </member>
        <member name="M:Caliburn.Views.ViewManager.ConfigureMessageSource(System.Windows.DependencyObject,Caliburn.Messaging.MessageBase)">
            <summary>
            Configures the source view as a sender of the provided message.
            </summary>
            <param name="source">The source view.</param>
            <param name="message">The message.</param>
        </member>
        <member name="M:Caliburn.Views.ViewManager.GetDefaults(System.Type)">
            <summary>
            Gets the default settings for an element type.
            </summary>
            <param name="elementType">Type of the element.</param>
            <returns>The element type's default settings.</returns>
        </member>
        <member name="T:Caliburn.Testability.StubEventBroker">
            <summary>
            A stub version of <see cref="T:Caliburn.Events.Brokering.IEventBroker"/>.
            </summary>
        </member>
        <member name="M:Caliburn.Testability.StubEventBroker.Publish(System.Object,System.Reflection.EventInfo,Caliburn.Events.Brokering.Publication)">
            <summary>
            Publishes the specified instance.
            </summary>
            <param name="instance">The instance.</param>
            <param name="actualEvent">The actual event.</param>
            <param name="publication">The publication.</param>
        </member>
        <member name="M:Caliburn.Testability.StubEventBroker.Subscribe(System.String,Caliburn.Events.Brokering.Subscription)">
            <summary>
            Subscribes the specified published event name.
            </summary>
            <param name="publishedEventName">Name of the published event.</param>
            <param name="subscription">The subscription.</param>
        </member>
        <member name="M:Caliburn.Testability.StubEventBroker.Raise(Caliburn.Events.Brokering.Publication,System.Object[])">
            <summary>
            Raises the specified publication.
            </summary>
            <param name="publication">The publication.</param>
            <param name="args">The args.</param>
        </member>
        <member name="M:Caliburn.Testability.StubEventBroker.GetSubscribers(System.String,System.Windows.RoutingStrategy)">
            <summary>
            Gets the subscribers.
            </summary>
            <param name="eventNodeName">Name of the event node.</param>
            <param name="strategy">The strategy.</param>
            <returns></returns>
        </member>
        <member name="M:Caliburn.Testability.StubEventBroker.GetSubscribedMethods(System.Type)">
            <summary>
            Gets the subscribed methods.
            </summary>
            <param name="type">The type.</param>
            <returns></returns>
        </member>
        <member name="M:Caliburn.Testability.StubEventBroker.GetPublishedEvents(System.Type)">
            <summary>
            Gets the published events.
            </summary>
            <param name="type">The type.</param>
            <returns></returns>
        </member>
        <member name="T:Caliburn.StateManagement.ValueEntry">
            <summary>
            Represents a simple serializable value.
            </summary>
        </member>
        <member name="M:Caliburn.StateManagement.ValueEntry.ReadXml(System.Xml.XmlReader)">
            <summary>
            Reads the XML.
            </summary>
            <param name="reader">The reader.</param>
        </member>
        <member name="M:Caliburn.StateManagement.ValueEntry.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Writes the XML.
            </summary>
            <param name="writer">The writer.</param>
        </member>
        <member name="P:Caliburn.StateManagement.ValueEntry.Value">
            <summary>
            Gets or sets the value.
            </summary>
            <value>The value.</value>
        </member>
        <member name="T:Caliburn.PlatformCapabilities.SaveFileDialogImplementer">
            <summary>
            A standard windows implementation of <see cref="T:Caliburn.Services.ISaveFileDialog"/>.
            </summary>
        </member>
        <member name="M:Caliburn.PlatformCapabilities.SaveFileDialogImplementer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.PlatformCapabilities.SaveFileDialogImplementer"/> class.
            </summary>
        </member>
        <member name="M:Caliburn.PlatformCapabilities.SaveFileDialogImplementer.OpenFile">
            <summary>
            Creates a read-write file stream for the filename selected by the user.
            </summary>
            <returns>
            A new System.IO.Stream that contains the selected file.
            </returns>
        </member>
        <member name="P:Caliburn.PlatformCapabilities.SaveFileDialogImplementer.OverwritePrompt">
            <summary>
            Gets or sets a value indicating whether the dialog displays a warning if the user specifies the name of a file that already exists.
            </summary>
            <value>
            	<c>true</c> if dialog should prompt prior to saving over a filename that previously existed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Caliburn.PlatformCapabilities.SaveFileDialogImplementer.CreatePrompt">
            <summary>
            Gets or sets a value indicating whether the dialog prompts the user for permission to create a file if the user specifies a file that does not exist.
            </summary>
            <value>
            	<c>true</c> if dialog should prompt prior to saving to a filename that did not previously exist; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Caliburn.Events.Brokering.EventNode">
            <summary>
            Represents a node in a tree of hierarchicaly related events.
            </summary>
        </member>
        <member name="M:Caliburn.Events.Brokering.EventNode.#ctor(System.String,Caliburn.Events.Brokering.EventNode)">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.Events.Brokering.EventNode"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="parent">The parent.</param>
        </member>
        <member name="M:Caliburn.Events.Brokering.EventNode.FindNodeByName(System.String)">
            <summary>
            Finds the node by name.
            </summary>
            <param name="name">The name.</param>
            <returns>The node.</returns>
        </member>
        <member name="M:Caliburn.Events.Brokering.EventNode.AddNode(System.String)">
            <summary>
            Adds a node with the given name.
            </summary>
            <param name="name">The name of the node to add.</param>
            <returns>The node.</returns>
        </member>
        <member name="P:Caliburn.Events.Brokering.EventNode.Name">
            <summary>
            Gets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:Caliburn.Events.Brokering.EventNode.Parent">
            <summary>
            Gets the parent.
            </summary>
            <value>The parent.</value>
        </member>
        <member name="P:Caliburn.Events.Brokering.EventNode.Subscriptions">
            <summary>
            Gets the subscriptions.
            </summary>
            <value>The subscriptions.</value>
        </member>
        <member name="P:Caliburn.Events.Brokering.EventNode.Children">
            <summary>
            Gets the children.
            </summary>
            <value>The children.</value>
        </member>
        <member name="T:Caliburn.Controls.Transitions.FlipTransition">
            <summary>
            Represents a flip transition.
            </summary>
        </member>
        <member name="F:Caliburn.Controls.Transitions.FlipTransition.DirectionProperty">
            <summary>
            A dependency property that represents Direction.
            </summary>
        </member>
        <member name="F:Caliburn.Controls.Transitions.FlipTransition.DurationProperty">
            <summary>
            A dependency property that represents Duration.
            </summary>
        </member>
        <member name="P:Caliburn.Controls.Transitions.FlipTransition.Duration">
            <summary>
            Gets or sets the duration.
            </summary>
            <value>The duration.</value>
        </member>
        <member name="P:Caliburn.Controls.Transitions.FlipTransition.Direction">
            <summary>
            Gets or sets the direction.
            </summary>
            <value>The direction.</value>
        </member>
        <member name="T:XamlGeneratedNamespace.GeneratedInternalTypeHelper">
            <summary>
            GeneratedInternalTypeHelper
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.CreateInstance(System.Type,System.Globalization.CultureInfo)">
            <summary>
            CreateInstance
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.GetPropertyValue(System.Reflection.PropertyInfo,System.Object,System.Globalization.CultureInfo)">
            <summary>
            GetPropertyValue
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.SetPropertyValue(System.Reflection.PropertyInfo,System.Object,System.Object,System.Globalization.CultureInfo)">
            <summary>
            SetPropertyValue
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.CreateDelegate(System.Type,System.Object,System.String)">
            <summary>
            CreateDelegate
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.AddEventHandler(System.Reflection.EventInfo,System.Object,System.Delegate)">
            <summary>
            AddEventHandler
            </summary>
        </member>
    </members>
</doc>
